"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.StardexFactoryClient = exports.StardexFactoryQueryClient = void 0;
class StardexFactoryQueryClient {
    client;
    contractAddress;
    constructor(client, contractAddress) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.config = this.config.bind(this);
        this.pair = this.pair.bind(this);
        this.pairs = this.pairs.bind(this);
        this.feeInfo = this.feeInfo.bind(this);
        this.blacklistedPairTypes = this.blacklistedPairTypes.bind(this);
        this.trackerConfig = this.trackerConfig.bind(this);
    }
    config = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            config: {}
        });
    };
    pair = async ({ assetInfos }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            pair: {
                asset_infos: assetInfos
            }
        });
    };
    pairs = async ({ limit, startAfter }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            pairs: {
                limit,
                start_after: startAfter
            }
        });
    };
    feeInfo = async ({ pairType }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            fee_info: {
                pair_type: pairType
            }
        });
    };
    blacklistedPairTypes = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            blacklisted_pair_types: {}
        });
    };
    trackerConfig = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            tracker_config: {}
        });
    };
}
exports.StardexFactoryQueryClient = StardexFactoryQueryClient;
class StardexFactoryClient extends StardexFactoryQueryClient {
    client;
    sender;
    contractAddress;
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.updateConfig = this.updateConfig.bind(this);
        this.updateTrackerConfig = this.updateTrackerConfig.bind(this);
        this.updatePairConfig = this.updatePairConfig.bind(this);
        this.createPair = this.createPair.bind(this);
        this.deregister = this.deregister.bind(this);
        this.proposeNewOwner = this.proposeNewOwner.bind(this);
        this.dropOwnershipProposal = this.dropOwnershipProposal.bind(this);
        this.claimOwnership = this.claimOwnership.bind(this);
    }
    updateConfig = async ({ coinRegistryAddress, feeAddress, generatorAddress, tokenCodeId, whitelistCodeId }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_config: {
                coin_registry_address: coinRegistryAddress,
                fee_address: feeAddress,
                generator_address: generatorAddress,
                token_code_id: tokenCodeId,
                whitelist_code_id: whitelistCodeId
            }
        }, fee, memo, _funds);
    };
    updateTrackerConfig = async ({ tokenFactoryAddr, trackerCodeId }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_tracker_config: {
                token_factory_addr: tokenFactoryAddr,
                tracker_code_id: trackerCodeId
            }
        }, fee, memo, _funds);
    };
    updatePairConfig = async ({ config }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_pair_config: {
                config
            }
        }, fee, memo, _funds);
    };
    createPair = async ({ assetInfos, initParams, pairType }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            create_pair: {
                asset_infos: assetInfos,
                init_params: initParams,
                pair_type: pairType
            }
        }, fee, memo, _funds);
    };
    deregister = async ({ assetInfos }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            deregister: {
                asset_infos: assetInfos
            }
        }, fee, memo, _funds);
    };
    proposeNewOwner = async ({ expiresIn, owner }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            propose_new_owner: {
                expires_in: expiresIn,
                owner
            }
        }, fee, memo, _funds);
    };
    dropOwnershipProposal = async (fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            drop_ownership_proposal: {}
        }, fee, memo, _funds);
    };
    claimOwnership = async (fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            claim_ownership: {}
        }, fee, memo, _funds);
    };
}
exports.StardexFactoryClient = StardexFactoryClient;
