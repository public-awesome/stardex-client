"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.StardexStakeNativeClient = exports.StardexStakeNativeQueryClient = void 0;
class StardexStakeNativeQueryClient {
    client;
    contractAddress;
    constructor(client, contractAddress) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.rewardAccounts = this.rewardAccounts.bind(this);
        this.stakeBalanceAtHeight = this.stakeBalanceAtHeight.bind(this);
    }
    rewardAccounts = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            reward_accounts: {}
        });
    };
    stakeBalanceAtHeight = async ({ address, height }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            stake_balance_at_height: {
                address,
                height
            }
        });
    };
}
exports.StardexStakeNativeQueryClient = StardexStakeNativeQueryClient;
class StardexStakeNativeClient extends StardexStakeNativeQueryClient {
    client;
    sender;
    contractAddress;
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.updateConfig = this.updateConfig.bind(this);
        this.createRewardAccount = this.createRewardAccount.bind(this);
        this.removeRewardAccount = this.removeRewardAccount.bind(this);
        this.stake = this.stake.bind(this);
        this.unstake = this.unstake.bind(this);
        this.claim = this.claim.bind(this);
        this.claimRewards = this.claimRewards.bind(this);
    }
    updateConfig = async ({ rewardsCodeId, unstakingDurationSec }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_config: {
                rewards_code_id: rewardsCodeId,
                unstaking_duration_sec: unstakingDurationSec
            }
        }, fee, memo, _funds);
    };
    createRewardAccount = async ({ denom, durationSec }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            create_reward_account: {
                denom,
                duration_sec: durationSec
            }
        }, fee, memo, _funds);
    };
    removeRewardAccount = async ({ rewardAccount }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            remove_reward_account: {
                reward_account: rewardAccount
            }
        }, fee, memo, _funds);
    };
    stake = async ({ recipient }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            stake: {
                recipient
            }
        }, fee, memo, _funds);
    };
    unstake = async ({ amount, recipient }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            unstake: {
                amount,
                recipient
            }
        }, fee, memo, _funds);
    };
    claim = async ({ recipient }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            claim: {
                recipient
            }
        }, fee, memo, _funds);
    };
    claimRewards = async ({ recipient }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            claim_rewards: {
                recipient
            }
        }, fee, memo, _funds);
    };
}
exports.StardexStakeNativeClient = StardexStakeNativeClient;
