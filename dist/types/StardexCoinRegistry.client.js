"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.StardexCoinRegistryClient = exports.StardexCoinRegistryQueryClient = void 0;
class StardexCoinRegistryQueryClient {
    client;
    contractAddress;
    constructor(client, contractAddress) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.config = this.config.bind(this);
        this.nativeToken = this.nativeToken.bind(this);
        this.nativeTokens = this.nativeTokens.bind(this);
    }
    config = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            config: {}
        });
    };
    nativeToken = async ({ denom }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            native_token: {
                denom
            }
        });
    };
    nativeTokens = async ({ limit, startAfter }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            native_tokens: {
                limit,
                start_after: startAfter
            }
        });
    };
}
exports.StardexCoinRegistryQueryClient = StardexCoinRegistryQueryClient;
class StardexCoinRegistryClient extends StardexCoinRegistryQueryClient {
    client;
    sender;
    contractAddress;
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.add = this.add.bind(this);
        this.remove = this.remove.bind(this);
        this.proposeNewOwner = this.proposeNewOwner.bind(this);
        this.dropOwnershipProposal = this.dropOwnershipProposal.bind(this);
        this.claimOwnership = this.claimOwnership.bind(this);
    }
    add = async ({ nativeCoins }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            add: {
                native_coins: nativeCoins
            }
        }, fee, memo, _funds);
    };
    remove = async ({ nativeCoins }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            remove: {
                native_coins: nativeCoins
            }
        }, fee, memo, _funds);
    };
    proposeNewOwner = async ({ expiresIn, owner }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            propose_new_owner: {
                expires_in: expiresIn,
                owner
            }
        }, fee, memo, _funds);
    };
    dropOwnershipProposal = async (fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            drop_ownership_proposal: {}
        }, fee, memo, _funds);
    };
    claimOwnership = async (fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            claim_ownership: {}
        }, fee, memo, _funds);
    };
}
exports.StardexCoinRegistryClient = StardexCoinRegistryClient;
