/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Uint128, Binary, Decimal, SwapOperation, ConfigResponse, SimulateSwapOperationsResponse } from "./StardexRouter.types";
import { StardexRouterQueryClient, StardexRouterClient } from "./StardexRouter.client";
export declare const stardexRouterQueryKeys: {
    contract: readonly [{
        readonly contract: "stardexRouter";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "stardexRouter";
    }];
    config: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "config";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexRouter";
    }];
    simulateSwapOperations: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "simulate_swap_operations";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexRouter";
    }];
};
export declare const stardexRouterQueries: {
    config: <TData = ConfigResponse>({ client, options }: StardexRouterConfigQuery<TData>) => UseQueryOptions<ConfigResponse, Error, TData, import("@tanstack/react-query").QueryKey>;
    simulateSwapOperations: <TData_1 = SimulateSwapOperationsResponse>({ client, args, options }: StardexRouterSimulateSwapOperationsQuery<TData_1>) => UseQueryOptions<SimulateSwapOperationsResponse, Error, TData_1, import("@tanstack/react-query").QueryKey>;
};
export interface StardexRouterReactQuery<TResponse, TData = TResponse> {
    client: StardexRouterQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface StardexRouterSimulateSwapOperationsQuery<TData> extends StardexRouterReactQuery<SimulateSwapOperationsResponse, TData> {
    args: {
        offerAmount: Uint128;
        operations: SwapOperation[];
    };
}
export declare function useStardexRouterSimulateSwapOperationsQuery<TData = SimulateSwapOperationsResponse>({ client, args, options }: StardexRouterSimulateSwapOperationsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexRouterConfigQuery<TData> extends StardexRouterReactQuery<ConfigResponse, TData> {
}
export declare function useStardexRouterConfigQuery<TData = ConfigResponse>({ client, options }: StardexRouterConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexRouterExecuteSwapOperationMutation {
    client: StardexRouterClient;
    msg: {
        maxSpread?: Decimal;
        operation: SwapOperation;
        single: boolean;
        to?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexRouterExecuteSwapOperationMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexRouterExecuteSwapOperationMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexRouterExecuteSwapOperationMutation, unknown>;
export interface StardexRouterExecuteSwapOperationsMutation {
    client: StardexRouterClient;
    msg: {
        maxSpread?: Decimal;
        minimumReceive?: Uint128;
        operations: SwapOperation[];
        to?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexRouterExecuteSwapOperationsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexRouterExecuteSwapOperationsMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexRouterExecuteSwapOperationsMutation, unknown>;
export interface StardexRouterReceiveMutation {
    client: StardexRouterClient;
    msg: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexRouterReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexRouterReceiveMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexRouterReceiveMutation, unknown>;
