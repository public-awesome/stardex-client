"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useStardexCoinRegistryAddMutation = exports.useStardexCoinRegistryRemoveMutation = exports.useStardexCoinRegistryProposeNewOwnerMutation = exports.useStardexCoinRegistryDropOwnershipProposalMutation = exports.useStardexCoinRegistryClaimOwnershipMutation = exports.useStardexCoinRegistryConfigQuery = exports.useStardexCoinRegistryNativeTokenQuery = exports.useStardexCoinRegistryNativeTokensQuery = exports.stardexCoinRegistryQueries = exports.stardexCoinRegistryQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.stardexCoinRegistryQueryKeys = {
    contract: [{
            contract: "stardexCoinRegistry"
        }],
    address: (contractAddress) => [{
            ...exports.stardexCoinRegistryQueryKeys.contract[0],
            address: contractAddress
        }],
    config: (contractAddress, args) => [{
            ...exports.stardexCoinRegistryQueryKeys.address(contractAddress)[0],
            method: "config",
            args
        }],
    nativeToken: (contractAddress, args) => [{
            ...exports.stardexCoinRegistryQueryKeys.address(contractAddress)[0],
            method: "native_token",
            args
        }],
    nativeTokens: (contractAddress, args) => [{
            ...exports.stardexCoinRegistryQueryKeys.address(contractAddress)[0],
            method: "native_tokens",
            args
        }]
};
exports.stardexCoinRegistryQueries = {
    config: ({ client, options }) => ({
        queryKey: exports.stardexCoinRegistryQueryKeys.config(client?.contractAddress),
        queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    }),
    nativeToken: ({ client, args, options }) => ({
        queryKey: exports.stardexCoinRegistryQueryKeys.nativeToken(client?.contractAddress, args),
        queryFn: () => client ? client.nativeToken({
            denom: args.denom
        }) : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    }),
    nativeTokens: ({ client, args, options }) => ({
        queryKey: exports.stardexCoinRegistryQueryKeys.nativeTokens(client?.contractAddress, args),
        queryFn: () => client ? client.nativeTokens({
            limit: args.limit,
            startAfter: args.startAfter
        }) : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    })
};
function useStardexCoinRegistryNativeTokensQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.stardexCoinRegistryQueryKeys.nativeTokens(client?.contractAddress, args), () => client ? client.nativeTokens({
        limit: args.limit,
        startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexCoinRegistryNativeTokensQuery = useStardexCoinRegistryNativeTokensQuery;
function useStardexCoinRegistryNativeTokenQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.stardexCoinRegistryQueryKeys.nativeToken(client?.contractAddress, args), () => client ? client.nativeToken({
        denom: args.denom
    }) : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexCoinRegistryNativeTokenQuery = useStardexCoinRegistryNativeTokenQuery;
function useStardexCoinRegistryConfigQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.stardexCoinRegistryQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexCoinRegistryConfigQuery = useStardexCoinRegistryConfigQuery;
function useStardexCoinRegistryClaimOwnershipMutation(options) {
    return (0, react_query_1.useMutation)(({ client, args: { fee, memo, funds } = {} }) => client.claimOwnership(fee, memo, funds), options);
}
exports.useStardexCoinRegistryClaimOwnershipMutation = useStardexCoinRegistryClaimOwnershipMutation;
function useStardexCoinRegistryDropOwnershipProposalMutation(options) {
    return (0, react_query_1.useMutation)(({ client, args: { fee, memo, funds } = {} }) => client.dropOwnershipProposal(fee, memo, funds), options);
}
exports.useStardexCoinRegistryDropOwnershipProposalMutation = useStardexCoinRegistryDropOwnershipProposalMutation;
function useStardexCoinRegistryProposeNewOwnerMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.proposeNewOwner(msg, fee, memo, funds), options);
}
exports.useStardexCoinRegistryProposeNewOwnerMutation = useStardexCoinRegistryProposeNewOwnerMutation;
function useStardexCoinRegistryRemoveMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.remove(msg, fee, memo, funds), options);
}
exports.useStardexCoinRegistryRemoveMutation = useStardexCoinRegistryRemoveMutation;
function useStardexCoinRegistryAddMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.add(msg, fee, memo, funds), options);
}
exports.useStardexCoinRegistryAddMutation = useStardexCoinRegistryAddMutation;
