/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { AssetInfo, Binary, Uint128, Decimal, Asset, Uint64, NullableUint128, Decimal256, ConfigResponse, CumulativePricesResponse, OracleObservation, PairInfo, PoolResponse, ReverseSimulationResponse, ArrayOfAsset, SimulationResponse } from "./StardexPairConcentrated.types";
import { StardexPairConcentratedQueryClient, StardexPairConcentratedClient } from "./StardexPairConcentrated.client";
export declare const stardexPairConcentratedQueryKeys: {
    contract: readonly [{
        readonly contract: "stardexPairConcentrated";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
    pair: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "pair";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
    pool: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "pool";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
    config: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "config";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
    share: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "share";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
    simulation: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "simulation";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
    reverseSimulation: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "reverse_simulation";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
    cumulativePrices: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "cumulative_prices";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
    computeD: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "compute_d";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
    lpPrice: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "lp_price";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
    assetBalanceAt: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "asset_balance_at";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
    observe: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "observe";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
    simulateProvide: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "simulate_provide";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
    simulateWithdraw: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "simulate_withdraw";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairConcentrated";
    }];
};
export declare const stardexPairConcentratedQueries: {
    pair: <TData = PairInfo>({ client, options }: StardexPairConcentratedPairQuery<TData>) => UseQueryOptions<PairInfo, Error, TData, import("@tanstack/react-query").QueryKey>;
    pool: <TData_1 = PoolResponse>({ client, options }: StardexPairConcentratedPoolQuery<TData_1>) => UseQueryOptions<PoolResponse, Error, TData_1, import("@tanstack/react-query").QueryKey>;
    config: <TData_2 = ConfigResponse>({ client, options }: StardexPairConcentratedConfigQuery<TData_2>) => UseQueryOptions<ConfigResponse, Error, TData_2, import("@tanstack/react-query").QueryKey>;
    share: <TData_3 = ArrayOfAsset>({ client, args, options }: StardexPairConcentratedShareQuery<TData_3>) => UseQueryOptions<ArrayOfAsset, Error, TData_3, import("@tanstack/react-query").QueryKey>;
    simulation: <TData_4 = SimulationResponse>({ client, args, options }: StardexPairConcentratedSimulationQuery<TData_4>) => UseQueryOptions<SimulationResponse, Error, TData_4, import("@tanstack/react-query").QueryKey>;
    reverseSimulation: <TData_5 = ReverseSimulationResponse>({ client, args, options }: StardexPairConcentratedReverseSimulationQuery<TData_5>) => UseQueryOptions<ReverseSimulationResponse, Error, TData_5, import("@tanstack/react-query").QueryKey>;
    cumulativePrices: <TData_6 = CumulativePricesResponse>({ client, options }: StardexPairConcentratedCumulativePricesQuery<TData_6>) => UseQueryOptions<CumulativePricesResponse, Error, TData_6, import("@tanstack/react-query").QueryKey>;
    computeD: <TData_7 = string>({ client, options }: StardexPairConcentratedComputeDQuery<TData_7>) => UseQueryOptions<string, Error, TData_7, import("@tanstack/react-query").QueryKey>;
    lpPrice: <TData_8 = string>({ client, options }: StardexPairConcentratedLpPriceQuery<TData_8>) => UseQueryOptions<string, Error, TData_8, import("@tanstack/react-query").QueryKey>;
    assetBalanceAt: <TData_9 = NullableUint128>({ client, args, options }: StardexPairConcentratedAssetBalanceAtQuery<TData_9>) => UseQueryOptions<NullableUint128, Error, TData_9, import("@tanstack/react-query").QueryKey>;
    observe: <TData_10 = OracleObservation>({ client, args, options }: StardexPairConcentratedObserveQuery<TData_10>) => UseQueryOptions<OracleObservation, Error, TData_10, import("@tanstack/react-query").QueryKey>;
    simulateProvide: <TData_11 = string>({ client, args, options }: StardexPairConcentratedSimulateProvideQuery<TData_11>) => UseQueryOptions<string, Error, TData_11, import("@tanstack/react-query").QueryKey>;
    simulateWithdraw: <TData_12 = ArrayOfAsset>({ client, args, options }: StardexPairConcentratedSimulateWithdrawQuery<TData_12>) => UseQueryOptions<ArrayOfAsset, Error, TData_12, import("@tanstack/react-query").QueryKey>;
};
export interface StardexPairConcentratedReactQuery<TResponse, TData = TResponse> {
    client: StardexPairConcentratedQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface StardexPairConcentratedSimulateWithdrawQuery<TData> extends StardexPairConcentratedReactQuery<ArrayOfAsset, TData> {
    args: {
        lpAmount: Uint128;
    };
}
export declare function useStardexPairConcentratedSimulateWithdrawQuery<TData = ArrayOfAsset>({ client, args, options }: StardexPairConcentratedSimulateWithdrawQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConcentratedSimulateProvideQuery<TData> extends StardexPairConcentratedReactQuery<Uint128, TData> {
    args: {
        assets: Asset[];
        slippageTolerance?: Decimal;
    };
}
export declare function useStardexPairConcentratedSimulateProvideQuery<TData = Uint128>({ client, args, options }: StardexPairConcentratedSimulateProvideQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConcentratedObserveQuery<TData> extends StardexPairConcentratedReactQuery<OracleObservation, TData> {
    args: {
        secondsAgo: number;
    };
}
export declare function useStardexPairConcentratedObserveQuery<TData = OracleObservation>({ client, args, options }: StardexPairConcentratedObserveQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConcentratedAssetBalanceAtQuery<TData> extends StardexPairConcentratedReactQuery<NullableUint128, TData> {
    args: {
        assetInfo: AssetInfo;
        blockHeight: Uint64;
    };
}
export declare function useStardexPairConcentratedAssetBalanceAtQuery<TData = NullableUint128>({ client, args, options }: StardexPairConcentratedAssetBalanceAtQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConcentratedLpPriceQuery<TData> extends StardexPairConcentratedReactQuery<Decimal256, TData> {
}
export declare function useStardexPairConcentratedLpPriceQuery<TData = Decimal256>({ client, options }: StardexPairConcentratedLpPriceQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConcentratedComputeDQuery<TData> extends StardexPairConcentratedReactQuery<Decimal256, TData> {
}
export declare function useStardexPairConcentratedComputeDQuery<TData = Decimal256>({ client, options }: StardexPairConcentratedComputeDQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConcentratedCumulativePricesQuery<TData> extends StardexPairConcentratedReactQuery<CumulativePricesResponse, TData> {
}
export declare function useStardexPairConcentratedCumulativePricesQuery<TData = CumulativePricesResponse>({ client, options }: StardexPairConcentratedCumulativePricesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConcentratedReverseSimulationQuery<TData> extends StardexPairConcentratedReactQuery<ReverseSimulationResponse, TData> {
    args: {
        askAsset: Asset;
        offerAssetInfo?: AssetInfo;
    };
}
export declare function useStardexPairConcentratedReverseSimulationQuery<TData = ReverseSimulationResponse>({ client, args, options }: StardexPairConcentratedReverseSimulationQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConcentratedSimulationQuery<TData> extends StardexPairConcentratedReactQuery<SimulationResponse, TData> {
    args: {
        askAssetInfo?: AssetInfo;
        offerAsset: Asset;
    };
}
export declare function useStardexPairConcentratedSimulationQuery<TData = SimulationResponse>({ client, args, options }: StardexPairConcentratedSimulationQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConcentratedShareQuery<TData> extends StardexPairConcentratedReactQuery<ArrayOfAsset, TData> {
    args: {
        amount: Uint128;
    };
}
export declare function useStardexPairConcentratedShareQuery<TData = ArrayOfAsset>({ client, args, options }: StardexPairConcentratedShareQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConcentratedConfigQuery<TData> extends StardexPairConcentratedReactQuery<ConfigResponse, TData> {
}
export declare function useStardexPairConcentratedConfigQuery<TData = ConfigResponse>({ client, options }: StardexPairConcentratedConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConcentratedPoolQuery<TData> extends StardexPairConcentratedReactQuery<PoolResponse, TData> {
}
export declare function useStardexPairConcentratedPoolQuery<TData = PoolResponse>({ client, options }: StardexPairConcentratedPoolQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConcentratedPairQuery<TData> extends StardexPairConcentratedReactQuery<PairInfo, TData> {
}
export declare function useStardexPairConcentratedPairQuery<TData = PairInfo>({ client, options }: StardexPairConcentratedPairQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConcentratedClaimOwnershipMutation {
    client: StardexPairConcentratedClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairConcentratedClaimOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairConcentratedClaimOwnershipMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairConcentratedClaimOwnershipMutation, unknown>;
export interface StardexPairConcentratedDropOwnershipProposalMutation {
    client: StardexPairConcentratedClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairConcentratedDropOwnershipProposalMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairConcentratedDropOwnershipProposalMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairConcentratedDropOwnershipProposalMutation, unknown>;
export interface StardexPairConcentratedProposeNewOwnerMutation {
    client: StardexPairConcentratedClient;
    msg: {
        expiresIn: number;
        owner: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairConcentratedProposeNewOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairConcentratedProposeNewOwnerMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairConcentratedProposeNewOwnerMutation, unknown>;
export interface StardexPairConcentratedUpdateConfigMutation {
    client: StardexPairConcentratedClient;
    msg: {
        params: Binary;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairConcentratedUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairConcentratedUpdateConfigMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairConcentratedUpdateConfigMutation, unknown>;
export interface StardexPairConcentratedSwapMutation {
    client: StardexPairConcentratedClient;
    msg: {
        askAssetInfo?: AssetInfo;
        beliefPrice?: Decimal;
        maxSpread?: Decimal;
        offerAsset: Asset;
        to?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairConcentratedSwapMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairConcentratedSwapMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairConcentratedSwapMutation, unknown>;
export interface StardexPairConcentratedWithdrawLiquidityMutation {
    client: StardexPairConcentratedClient;
    msg: {
        assets?: Asset[];
        minAssetsToReceive?: Asset[];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairConcentratedWithdrawLiquidityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairConcentratedWithdrawLiquidityMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairConcentratedWithdrawLiquidityMutation, unknown>;
export interface StardexPairConcentratedProvideLiquidityMutation {
    client: StardexPairConcentratedClient;
    msg: {
        assets: Asset[];
        autoStake?: boolean;
        minLpToReceive?: Uint128;
        receiver?: string;
        slippageTolerance?: Decimal;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairConcentratedProvideLiquidityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairConcentratedProvideLiquidityMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairConcentratedProvideLiquidityMutation, unknown>;
export interface StardexPairConcentratedReceiveMutation {
    client: StardexPairConcentratedClient;
    msg: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairConcentratedReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairConcentratedReceiveMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairConcentratedReceiveMutation, unknown>;
