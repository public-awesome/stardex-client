/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, ExecMsg, Uint128, QueryMsg, QueryMsg1, Addr, ArrayOfAddr } from "./StardexStakeNative.types";
export interface StardexStakeNativeReadOnlyInterface {
  contractAddress: string;
  rewardAccounts: () => Promise<ArrayOfAddr>;
  stakeBalanceAtHeight: ({
    address,
    height
  }: {
    address: string;
    height?: number;
  }) => Promise<Uint128>;
}
export class StardexStakeNativeQueryClient implements StardexStakeNativeReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.rewardAccounts = this.rewardAccounts.bind(this);
    this.stakeBalanceAtHeight = this.stakeBalanceAtHeight.bind(this);
  }
  rewardAccounts = async (): Promise<ArrayOfAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reward_accounts: {}
    });
  };
  stakeBalanceAtHeight = async ({
    address,
    height
  }: {
    address: string;
    height?: number;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      stake_balance_at_height: {
        address,
        height
      }
    });
  };
}
export interface StardexStakeNativeInterface extends StardexStakeNativeReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    rewardsCodeId,
    unstakingDurationSec
  }: {
    rewardsCodeId?: number;
    unstakingDurationSec?: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  createRewardAccount: ({
    denom,
    durationSec
  }: {
    denom: string;
    durationSec: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeRewardAccount: ({
    rewardAccount
  }: {
    rewardAccount: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  stake: ({
    recipient
  }: {
    recipient?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unstake: ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claim: ({
    recipient
  }: {
    recipient?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimRewards: ({
    recipient
  }: {
    recipient?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class StardexStakeNativeClient extends StardexStakeNativeQueryClient implements StardexStakeNativeInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.createRewardAccount = this.createRewardAccount.bind(this);
    this.removeRewardAccount = this.removeRewardAccount.bind(this);
    this.stake = this.stake.bind(this);
    this.unstake = this.unstake.bind(this);
    this.claim = this.claim.bind(this);
    this.claimRewards = this.claimRewards.bind(this);
  }
  updateConfig = async ({
    rewardsCodeId,
    unstakingDurationSec
  }: {
    rewardsCodeId?: number;
    unstakingDurationSec?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        rewards_code_id: rewardsCodeId,
        unstaking_duration_sec: unstakingDurationSec
      }
    }, fee, memo, _funds);
  };
  createRewardAccount = async ({
    denom,
    durationSec
  }: {
    denom: string;
    durationSec: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_reward_account: {
        denom,
        duration_sec: durationSec
      }
    }, fee, memo, _funds);
  };
  removeRewardAccount = async ({
    rewardAccount
  }: {
    rewardAccount: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_reward_account: {
        reward_account: rewardAccount
      }
    }, fee, memo, _funds);
  };
  stake = async ({
    recipient
  }: {
    recipient?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      stake: {
        recipient
      }
    }, fee, memo, _funds);
  };
  unstake = async ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unstake: {
        amount,
        recipient
      }
    }, fee, memo, _funds);
  };
  claim = async ({
    recipient
  }: {
    recipient?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {
        recipient
      }
    }, fee, memo, _funds);
  };
  claimRewards = async ({
    recipient
  }: {
    recipient?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_rewards: {
        recipient
      }
    }, fee, memo, _funds);
  };
}