/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Uint128, Logo, Binary, MinterResponse, Expiration, AllAccountsResponse, AllAllowancesResponse, AllSpenderAllowancesResponse, AllowanceResponse, BalanceResponse, DownloadLogoResponse, MarketingInfoResponse, TokenInfoResponse } from "./StardexToken.types";
import { StardexTokenQueryClient, StardexTokenClient } from "./StardexToken.client";
export declare const stardexTokenQueryKeys: {
    contract: readonly [{
        readonly contract: "stardexToken";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "stardexToken";
    }];
    balance: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "balance";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexToken";
    }];
    tokenInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "token_info";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexToken";
    }];
    minter: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "minter";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexToken";
    }];
    allowance: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "allowance";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexToken";
    }];
    allAllowances: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "all_allowances";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexToken";
    }];
    allSpenderAllowances: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "all_spender_allowances";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexToken";
    }];
    allAccounts: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "all_accounts";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexToken";
    }];
    marketingInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "marketing_info";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexToken";
    }];
    downloadLogo: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "download_logo";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexToken";
    }];
};
export declare const stardexTokenQueries: {
    balance: <TData = BalanceResponse>({ client, args, options }: StardexTokenBalanceQuery<TData>) => UseQueryOptions<BalanceResponse, Error, TData, import("@tanstack/react-query").QueryKey>;
    tokenInfo: <TData_1 = TokenInfoResponse>({ client, options }: StardexTokenTokenInfoQuery<TData_1>) => UseQueryOptions<TokenInfoResponse, Error, TData_1, import("@tanstack/react-query").QueryKey>;
    minter: <TData_2 = MinterResponse>({ client, options }: StardexTokenMinterQuery<TData_2>) => UseQueryOptions<MinterResponse, Error, TData_2, import("@tanstack/react-query").QueryKey>;
    allowance: <TData_3 = AllowanceResponse>({ client, args, options }: StardexTokenAllowanceQuery<TData_3>) => UseQueryOptions<AllowanceResponse, Error, TData_3, import("@tanstack/react-query").QueryKey>;
    allAllowances: <TData_4 = AllAllowancesResponse>({ client, args, options }: StardexTokenAllAllowancesQuery<TData_4>) => UseQueryOptions<AllAllowancesResponse, Error, TData_4, import("@tanstack/react-query").QueryKey>;
    allSpenderAllowances: <TData_5 = AllSpenderAllowancesResponse>({ client, args, options }: StardexTokenAllSpenderAllowancesQuery<TData_5>) => UseQueryOptions<AllSpenderAllowancesResponse, Error, TData_5, import("@tanstack/react-query").QueryKey>;
    allAccounts: <TData_6 = AllAccountsResponse>({ client, args, options }: StardexTokenAllAccountsQuery<TData_6>) => UseQueryOptions<AllAccountsResponse, Error, TData_6, import("@tanstack/react-query").QueryKey>;
    marketingInfo: <TData_7 = MarketingInfoResponse>({ client, options }: StardexTokenMarketingInfoQuery<TData_7>) => UseQueryOptions<MarketingInfoResponse, Error, TData_7, import("@tanstack/react-query").QueryKey>;
    downloadLogo: <TData_8 = DownloadLogoResponse>({ client, options }: StardexTokenDownloadLogoQuery<TData_8>) => UseQueryOptions<DownloadLogoResponse, Error, TData_8, import("@tanstack/react-query").QueryKey>;
};
export interface StardexTokenReactQuery<TResponse, TData = TResponse> {
    client: StardexTokenQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface StardexTokenDownloadLogoQuery<TData> extends StardexTokenReactQuery<DownloadLogoResponse, TData> {
}
export declare function useStardexTokenDownloadLogoQuery<TData = DownloadLogoResponse>({ client, options }: StardexTokenDownloadLogoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexTokenMarketingInfoQuery<TData> extends StardexTokenReactQuery<MarketingInfoResponse, TData> {
}
export declare function useStardexTokenMarketingInfoQuery<TData = MarketingInfoResponse>({ client, options }: StardexTokenMarketingInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexTokenAllAccountsQuery<TData> extends StardexTokenReactQuery<AllAccountsResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useStardexTokenAllAccountsQuery<TData = AllAccountsResponse>({ client, args, options }: StardexTokenAllAccountsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexTokenAllSpenderAllowancesQuery<TData> extends StardexTokenReactQuery<AllSpenderAllowancesResponse, TData> {
    args: {
        limit?: number;
        spender: string;
        startAfter?: string;
    };
}
export declare function useStardexTokenAllSpenderAllowancesQuery<TData = AllSpenderAllowancesResponse>({ client, args, options }: StardexTokenAllSpenderAllowancesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexTokenAllAllowancesQuery<TData> extends StardexTokenReactQuery<AllAllowancesResponse, TData> {
    args: {
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function useStardexTokenAllAllowancesQuery<TData = AllAllowancesResponse>({ client, args, options }: StardexTokenAllAllowancesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexTokenAllowanceQuery<TData> extends StardexTokenReactQuery<AllowanceResponse, TData> {
    args: {
        owner: string;
        spender: string;
    };
}
export declare function useStardexTokenAllowanceQuery<TData = AllowanceResponse>({ client, args, options }: StardexTokenAllowanceQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexTokenMinterQuery<TData> extends StardexTokenReactQuery<MinterResponse, TData> {
}
export declare function useStardexTokenMinterQuery<TData = MinterResponse>({ client, options }: StardexTokenMinterQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexTokenTokenInfoQuery<TData> extends StardexTokenReactQuery<TokenInfoResponse, TData> {
}
export declare function useStardexTokenTokenInfoQuery<TData = TokenInfoResponse>({ client, options }: StardexTokenTokenInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexTokenBalanceQuery<TData> extends StardexTokenReactQuery<BalanceResponse, TData> {
    args: {
        address: string;
    };
}
export declare function useStardexTokenBalanceQuery<TData = BalanceResponse>({ client, args, options }: StardexTokenBalanceQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexTokenUploadLogoMutation {
    client: StardexTokenClient;
    msg: Logo;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexTokenUploadLogoMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenUploadLogoMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexTokenUploadLogoMutation, unknown>;
export interface StardexTokenUpdateMarketingMutation {
    client: StardexTokenClient;
    msg: {
        description?: string;
        marketing?: string;
        project?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexTokenUpdateMarketingMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenUpdateMarketingMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexTokenUpdateMarketingMutation, unknown>;
export interface StardexTokenUpdateMinterMutation {
    client: StardexTokenClient;
    msg: {
        newMinter?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexTokenUpdateMinterMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenUpdateMinterMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexTokenUpdateMinterMutation, unknown>;
export interface StardexTokenMintMutation {
    client: StardexTokenClient;
    msg: {
        amount: Uint128;
        recipient: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexTokenMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenMintMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexTokenMintMutation, unknown>;
export interface StardexTokenBurnFromMutation {
    client: StardexTokenClient;
    msg: {
        amount: Uint128;
        owner: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexTokenBurnFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenBurnFromMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexTokenBurnFromMutation, unknown>;
export interface StardexTokenSendFromMutation {
    client: StardexTokenClient;
    msg: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexTokenSendFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenSendFromMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexTokenSendFromMutation, unknown>;
export interface StardexTokenTransferFromMutation {
    client: StardexTokenClient;
    msg: {
        amount: Uint128;
        owner: string;
        recipient: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexTokenTransferFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenTransferFromMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexTokenTransferFromMutation, unknown>;
export interface StardexTokenDecreaseAllowanceMutation {
    client: StardexTokenClient;
    msg: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexTokenDecreaseAllowanceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenDecreaseAllowanceMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexTokenDecreaseAllowanceMutation, unknown>;
export interface StardexTokenIncreaseAllowanceMutation {
    client: StardexTokenClient;
    msg: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexTokenIncreaseAllowanceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenIncreaseAllowanceMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexTokenIncreaseAllowanceMutation, unknown>;
export interface StardexTokenSendMutation {
    client: StardexTokenClient;
    msg: {
        amount: Uint128;
        contract: string;
        msg: Binary;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexTokenSendMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenSendMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexTokenSendMutation, unknown>;
export interface StardexTokenBurnMutation {
    client: StardexTokenClient;
    msg: {
        amount: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexTokenBurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenBurnMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexTokenBurnMutation, unknown>;
export interface StardexTokenTransferMutation {
    client: StardexTokenClient;
    msg: {
        amount: Uint128;
        recipient: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexTokenTransferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenTransferMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexTokenTransferMutation, unknown>;
