/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { AssetInfo, Binary, Uint128, Decimal, Asset, Uint64, NullableUint128, ConfigResponse, CumulativePricesResponse, OracleObservation, PairInfo, PoolResponse, ReverseSimulationResponse, ArrayOfAsset, SimulationResponse } from "./StardexPairStable.types";
import { StardexPairStableQueryClient, StardexPairStableClient } from "./StardexPairStable.client";
export declare const stardexPairStableQueryKeys: {
    contract: readonly [{
        readonly contract: "stardexPairStable";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "stardexPairStable";
    }];
    pair: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "pair";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairStable";
    }];
    pool: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "pool";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairStable";
    }];
    config: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "config";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairStable";
    }];
    share: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "share";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairStable";
    }];
    simulation: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "simulation";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairStable";
    }];
    reverseSimulation: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "reverse_simulation";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairStable";
    }];
    cumulativePrices: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "cumulative_prices";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairStable";
    }];
    queryComputeD: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "query_compute_d";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairStable";
    }];
    assetBalanceAt: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "asset_balance_at";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairStable";
    }];
    observe: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "observe";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairStable";
    }];
    simulateWithdraw: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "simulate_withdraw";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairStable";
    }];
    simulateProvide: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "simulate_provide";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPairStable";
    }];
};
export declare const stardexPairStableQueries: {
    pair: <TData = PairInfo>({ client, options }: StardexPairStablePairQuery<TData>) => UseQueryOptions<PairInfo, Error, TData, import("@tanstack/react-query").QueryKey>;
    pool: <TData_1 = PoolResponse>({ client, options }: StardexPairStablePoolQuery<TData_1>) => UseQueryOptions<PoolResponse, Error, TData_1, import("@tanstack/react-query").QueryKey>;
    config: <TData_2 = ConfigResponse>({ client, options }: StardexPairStableConfigQuery<TData_2>) => UseQueryOptions<ConfigResponse, Error, TData_2, import("@tanstack/react-query").QueryKey>;
    share: <TData_3 = ArrayOfAsset>({ client, args, options }: StardexPairStableShareQuery<TData_3>) => UseQueryOptions<ArrayOfAsset, Error, TData_3, import("@tanstack/react-query").QueryKey>;
    simulation: <TData_4 = SimulationResponse>({ client, args, options }: StardexPairStableSimulationQuery<TData_4>) => UseQueryOptions<SimulationResponse, Error, TData_4, import("@tanstack/react-query").QueryKey>;
    reverseSimulation: <TData_5 = ReverseSimulationResponse>({ client, args, options }: StardexPairStableReverseSimulationQuery<TData_5>) => UseQueryOptions<ReverseSimulationResponse, Error, TData_5, import("@tanstack/react-query").QueryKey>;
    cumulativePrices: <TData_6 = CumulativePricesResponse>({ client, options }: StardexPairStableCumulativePricesQuery<TData_6>) => UseQueryOptions<CumulativePricesResponse, Error, TData_6, import("@tanstack/react-query").QueryKey>;
    queryComputeD: <TData_7 = string>({ client, options }: StardexPairStableQueryComputeDQuery<TData_7>) => UseQueryOptions<string, Error, TData_7, import("@tanstack/react-query").QueryKey>;
    assetBalanceAt: <TData_8 = NullableUint128>({ client, args, options }: StardexPairStableAssetBalanceAtQuery<TData_8>) => UseQueryOptions<NullableUint128, Error, TData_8, import("@tanstack/react-query").QueryKey>;
    observe: <TData_9 = OracleObservation>({ client, args, options }: StardexPairStableObserveQuery<TData_9>) => UseQueryOptions<OracleObservation, Error, TData_9, import("@tanstack/react-query").QueryKey>;
    simulateWithdraw: <TData_10 = ArrayOfAsset>({ client, args, options }: StardexPairStableSimulateWithdrawQuery<TData_10>) => UseQueryOptions<ArrayOfAsset, Error, TData_10, import("@tanstack/react-query").QueryKey>;
    simulateProvide: <TData_11 = string>({ client, args, options }: StardexPairStableSimulateProvideQuery<TData_11>) => UseQueryOptions<string, Error, TData_11, import("@tanstack/react-query").QueryKey>;
};
export interface StardexPairStableReactQuery<TResponse, TData = TResponse> {
    client: StardexPairStableQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface StardexPairStableSimulateProvideQuery<TData> extends StardexPairStableReactQuery<Uint128, TData> {
    args: {
        assets: Asset[];
        slippageTolerance?: Decimal;
    };
}
export declare function useStardexPairStableSimulateProvideQuery<TData = Uint128>({ client, args, options }: StardexPairStableSimulateProvideQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairStableSimulateWithdrawQuery<TData> extends StardexPairStableReactQuery<ArrayOfAsset, TData> {
    args: {
        lpAmount: Uint128;
    };
}
export declare function useStardexPairStableSimulateWithdrawQuery<TData = ArrayOfAsset>({ client, args, options }: StardexPairStableSimulateWithdrawQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairStableObserveQuery<TData> extends StardexPairStableReactQuery<OracleObservation, TData> {
    args: {
        secondsAgo: number;
    };
}
export declare function useStardexPairStableObserveQuery<TData = OracleObservation>({ client, args, options }: StardexPairStableObserveQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairStableAssetBalanceAtQuery<TData> extends StardexPairStableReactQuery<NullableUint128, TData> {
    args: {
        assetInfo: AssetInfo;
        blockHeight: Uint64;
    };
}
export declare function useStardexPairStableAssetBalanceAtQuery<TData = NullableUint128>({ client, args, options }: StardexPairStableAssetBalanceAtQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairStableQueryComputeDQuery<TData> extends StardexPairStableReactQuery<Uint128, TData> {
}
export declare function useStardexPairStableQueryComputeDQuery<TData = Uint128>({ client, options }: StardexPairStableQueryComputeDQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairStableCumulativePricesQuery<TData> extends StardexPairStableReactQuery<CumulativePricesResponse, TData> {
}
export declare function useStardexPairStableCumulativePricesQuery<TData = CumulativePricesResponse>({ client, options }: StardexPairStableCumulativePricesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairStableReverseSimulationQuery<TData> extends StardexPairStableReactQuery<ReverseSimulationResponse, TData> {
    args: {
        askAsset: Asset;
        offerAssetInfo?: AssetInfo;
    };
}
export declare function useStardexPairStableReverseSimulationQuery<TData = ReverseSimulationResponse>({ client, args, options }: StardexPairStableReverseSimulationQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairStableSimulationQuery<TData> extends StardexPairStableReactQuery<SimulationResponse, TData> {
    args: {
        askAssetInfo?: AssetInfo;
        offerAsset: Asset;
    };
}
export declare function useStardexPairStableSimulationQuery<TData = SimulationResponse>({ client, args, options }: StardexPairStableSimulationQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairStableShareQuery<TData> extends StardexPairStableReactQuery<ArrayOfAsset, TData> {
    args: {
        amount: Uint128;
    };
}
export declare function useStardexPairStableShareQuery<TData = ArrayOfAsset>({ client, args, options }: StardexPairStableShareQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairStableConfigQuery<TData> extends StardexPairStableReactQuery<ConfigResponse, TData> {
}
export declare function useStardexPairStableConfigQuery<TData = ConfigResponse>({ client, options }: StardexPairStableConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairStablePoolQuery<TData> extends StardexPairStableReactQuery<PoolResponse, TData> {
}
export declare function useStardexPairStablePoolQuery<TData = PoolResponse>({ client, options }: StardexPairStablePoolQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairStablePairQuery<TData> extends StardexPairStableReactQuery<PairInfo, TData> {
}
export declare function useStardexPairStablePairQuery<TData = PairInfo>({ client, options }: StardexPairStablePairQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairStableClaimOwnershipMutation {
    client: StardexPairStableClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairStableClaimOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairStableClaimOwnershipMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairStableClaimOwnershipMutation, unknown>;
export interface StardexPairStableDropOwnershipProposalMutation {
    client: StardexPairStableClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairStableDropOwnershipProposalMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairStableDropOwnershipProposalMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairStableDropOwnershipProposalMutation, unknown>;
export interface StardexPairStableProposeNewOwnerMutation {
    client: StardexPairStableClient;
    msg: {
        expiresIn: number;
        owner: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairStableProposeNewOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairStableProposeNewOwnerMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairStableProposeNewOwnerMutation, unknown>;
export interface StardexPairStableUpdateConfigMutation {
    client: StardexPairStableClient;
    msg: {
        params: Binary;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairStableUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairStableUpdateConfigMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairStableUpdateConfigMutation, unknown>;
export interface StardexPairStableSwapMutation {
    client: StardexPairStableClient;
    msg: {
        askAssetInfo?: AssetInfo;
        beliefPrice?: Decimal;
        maxSpread?: Decimal;
        offerAsset: Asset;
        to?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairStableSwapMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairStableSwapMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairStableSwapMutation, unknown>;
export interface StardexPairStableWithdrawLiquidityMutation {
    client: StardexPairStableClient;
    msg: {
        assets?: Asset[];
        minAssetsToReceive?: Asset[];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairStableWithdrawLiquidityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairStableWithdrawLiquidityMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairStableWithdrawLiquidityMutation, unknown>;
export interface StardexPairStableProvideLiquidityMutation {
    client: StardexPairStableClient;
    msg: {
        assets: Asset[];
        autoStake?: boolean;
        minLpToReceive?: Uint128;
        receiver?: string;
        slippageTolerance?: Decimal;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairStableProvideLiquidityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairStableProvideLiquidityMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairStableProvideLiquidityMutation, unknown>;
export interface StardexPairStableReceiveMutation {
    client: StardexPairStableClient;
    msg: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairStableReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairStableReceiveMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairStableReceiveMutation, unknown>;
