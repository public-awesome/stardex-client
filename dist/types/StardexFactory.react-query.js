"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useStardexFactoryUpdateConfigMutation = exports.useStardexFactoryUpdateTrackerConfigMutation = exports.useStardexFactoryUpdatePairConfigMutation = exports.useStardexFactoryCreatePairMutation = exports.useStardexFactoryDeregisterMutation = exports.useStardexFactoryProposeNewOwnerMutation = exports.useStardexFactoryDropOwnershipProposalMutation = exports.useStardexFactoryClaimOwnershipMutation = exports.useStardexFactoryConfigQuery = exports.useStardexFactoryPairQuery = exports.useStardexFactoryPairsQuery = exports.useStardexFactoryFeeInfoQuery = exports.useStardexFactoryBlacklistedPairTypesQuery = exports.useStardexFactoryTrackerConfigQuery = exports.stardexFactoryQueries = exports.stardexFactoryQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.stardexFactoryQueryKeys = {
    contract: [{
            contract: "stardexFactory"
        }],
    address: (contractAddress) => [{
            ...exports.stardexFactoryQueryKeys.contract[0],
            address: contractAddress
        }],
    config: (contractAddress, args) => [{
            ...exports.stardexFactoryQueryKeys.address(contractAddress)[0],
            method: "config",
            args
        }],
    pair: (contractAddress, args) => [{
            ...exports.stardexFactoryQueryKeys.address(contractAddress)[0],
            method: "pair",
            args
        }],
    pairs: (contractAddress, args) => [{
            ...exports.stardexFactoryQueryKeys.address(contractAddress)[0],
            method: "pairs",
            args
        }],
    feeInfo: (contractAddress, args) => [{
            ...exports.stardexFactoryQueryKeys.address(contractAddress)[0],
            method: "fee_info",
            args
        }],
    blacklistedPairTypes: (contractAddress, args) => [{
            ...exports.stardexFactoryQueryKeys.address(contractAddress)[0],
            method: "blacklisted_pair_types",
            args
        }],
    trackerConfig: (contractAddress, args) => [{
            ...exports.stardexFactoryQueryKeys.address(contractAddress)[0],
            method: "tracker_config",
            args
        }]
};
exports.stardexFactoryQueries = {
    config: ({ client, options }) => ({
        queryKey: exports.stardexFactoryQueryKeys.config(client?.contractAddress),
        queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    }),
    pair: ({ client, args, options }) => ({
        queryKey: exports.stardexFactoryQueryKeys.pair(client?.contractAddress, args),
        queryFn: () => client ? client.pair({
            assetInfos: args.assetInfos
        }) : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    }),
    pairs: ({ client, args, options }) => ({
        queryKey: exports.stardexFactoryQueryKeys.pairs(client?.contractAddress, args),
        queryFn: () => client ? client.pairs({
            limit: args.limit,
            startAfter: args.startAfter
        }) : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    }),
    feeInfo: ({ client, args, options }) => ({
        queryKey: exports.stardexFactoryQueryKeys.feeInfo(client?.contractAddress, args),
        queryFn: () => client ? client.feeInfo({
            pairType: args.pairType
        }) : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    }),
    blacklistedPairTypes: ({ client, options }) => ({
        queryKey: exports.stardexFactoryQueryKeys.blacklistedPairTypes(client?.contractAddress),
        queryFn: () => client ? client.blacklistedPairTypes() : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    }),
    trackerConfig: ({ client, options }) => ({
        queryKey: exports.stardexFactoryQueryKeys.trackerConfig(client?.contractAddress),
        queryFn: () => client ? client.trackerConfig() : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    })
};
function useStardexFactoryTrackerConfigQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.stardexFactoryQueryKeys.trackerConfig(client?.contractAddress), () => client ? client.trackerConfig() : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexFactoryTrackerConfigQuery = useStardexFactoryTrackerConfigQuery;
function useStardexFactoryBlacklistedPairTypesQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.stardexFactoryQueryKeys.blacklistedPairTypes(client?.contractAddress), () => client ? client.blacklistedPairTypes() : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexFactoryBlacklistedPairTypesQuery = useStardexFactoryBlacklistedPairTypesQuery;
function useStardexFactoryFeeInfoQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.stardexFactoryQueryKeys.feeInfo(client?.contractAddress, args), () => client ? client.feeInfo({
        pairType: args.pairType
    }) : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexFactoryFeeInfoQuery = useStardexFactoryFeeInfoQuery;
function useStardexFactoryPairsQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.stardexFactoryQueryKeys.pairs(client?.contractAddress, args), () => client ? client.pairs({
        limit: args.limit,
        startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexFactoryPairsQuery = useStardexFactoryPairsQuery;
function useStardexFactoryPairQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.stardexFactoryQueryKeys.pair(client?.contractAddress, args), () => client ? client.pair({
        assetInfos: args.assetInfos
    }) : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexFactoryPairQuery = useStardexFactoryPairQuery;
function useStardexFactoryConfigQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.stardexFactoryQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexFactoryConfigQuery = useStardexFactoryConfigQuery;
function useStardexFactoryClaimOwnershipMutation(options) {
    return (0, react_query_1.useMutation)(({ client, args: { fee, memo, funds } = {} }) => client.claimOwnership(fee, memo, funds), options);
}
exports.useStardexFactoryClaimOwnershipMutation = useStardexFactoryClaimOwnershipMutation;
function useStardexFactoryDropOwnershipProposalMutation(options) {
    return (0, react_query_1.useMutation)(({ client, args: { fee, memo, funds } = {} }) => client.dropOwnershipProposal(fee, memo, funds), options);
}
exports.useStardexFactoryDropOwnershipProposalMutation = useStardexFactoryDropOwnershipProposalMutation;
function useStardexFactoryProposeNewOwnerMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.proposeNewOwner(msg, fee, memo, funds), options);
}
exports.useStardexFactoryProposeNewOwnerMutation = useStardexFactoryProposeNewOwnerMutation;
function useStardexFactoryDeregisterMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.deregister(msg, fee, memo, funds), options);
}
exports.useStardexFactoryDeregisterMutation = useStardexFactoryDeregisterMutation;
function useStardexFactoryCreatePairMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.createPair(msg, fee, memo, funds), options);
}
exports.useStardexFactoryCreatePairMutation = useStardexFactoryCreatePairMutation;
function useStardexFactoryUpdatePairConfigMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updatePairConfig(msg, fee, memo, funds), options);
}
exports.useStardexFactoryUpdatePairConfigMutation = useStardexFactoryUpdatePairConfigMutation;
function useStardexFactoryUpdateTrackerConfigMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateTrackerConfig(msg, fee, memo, funds), options);
}
exports.useStardexFactoryUpdateTrackerConfigMutation = useStardexFactoryUpdateTrackerConfigMutation;
function useStardexFactoryUpdateConfigMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateConfig(msg, fee, memo, funds), options);
}
exports.useStardexFactoryUpdateConfigMutation = useStardexFactoryUpdateConfigMutation;
