/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, ArrayOfAddr } from "./StardexStakeNative.types";
export interface StardexStakeNativeReadOnlyInterface {
    contractAddress: string;
    rewardAccounts: () => Promise<ArrayOfAddr>;
    stakeBalanceAtHeight: ({ address, height }: {
        address: string;
        height?: number;
    }) => Promise<Uint128>;
}
export declare class StardexStakeNativeQueryClient implements StardexStakeNativeReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    rewardAccounts: () => Promise<ArrayOfAddr>;
    stakeBalanceAtHeight: ({ address, height }: {
        address: string;
        height?: number | undefined;
    }) => Promise<Uint128>;
}
export interface StardexStakeNativeInterface extends StardexStakeNativeReadOnlyInterface {
    contractAddress: string;
    sender: string;
    updateConfig: ({ rewardsCodeId, unstakingDurationSec }: {
        rewardsCodeId?: number;
        unstakingDurationSec?: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    createRewardAccount: ({ denom, durationSec }: {
        denom: string;
        durationSec: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeRewardAccount: ({ rewardAccount }: {
        rewardAccount: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    stake: ({ recipient }: {
        recipient?: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unstake: ({ amount, recipient }: {
        amount: Uint128;
        recipient?: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claim: ({ recipient }: {
        recipient?: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claimRewards: ({ recipient }: {
        recipient?: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class StardexStakeNativeClient extends StardexStakeNativeQueryClient implements StardexStakeNativeInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    updateConfig: ({ rewardsCodeId, unstakingDurationSec }: {
        rewardsCodeId?: number | undefined;
        unstakingDurationSec?: number | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    createRewardAccount: ({ denom, durationSec }: {
        denom: string;
        durationSec: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeRewardAccount: ({ rewardAccount }: {
        rewardAccount: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    stake: ({ recipient }: {
        recipient?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unstake: ({ amount, recipient }: {
        amount: Uint128;
        recipient?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claim: ({ recipient }: {
        recipient?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claimRewards: ({ recipient }: {
        recipient?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
