/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, ExecMsg, Uint128, QueryMsg, QueryMsg1, Addr, ArrayOfAddr } from "./StardexStakeNative.types";
import { StardexStakeNativeQueryClient, StardexStakeNativeClient } from "./StardexStakeNative.client";
export const stardexStakeNativeQueryKeys = {
  contract: ([{
    contract: "stardexStakeNative"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...stardexStakeNativeQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  rewardAccounts: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexStakeNativeQueryKeys.address(contractAddress)[0],
    method: "reward_accounts",
    args
  }] as const),
  stakeBalanceAtHeight: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexStakeNativeQueryKeys.address(contractAddress)[0],
    method: "stake_balance_at_height",
    args
  }] as const)
};
export const stardexStakeNativeQueries = {
  rewardAccounts: <TData = ArrayOfAddr,>({
    client,
    options
  }: StardexStakeNativeRewardAccountsQuery<TData>): UseQueryOptions<ArrayOfAddr, Error, TData> => ({
    queryKey: stardexStakeNativeQueryKeys.rewardAccounts(client?.contractAddress),
    queryFn: () => client ? client.rewardAccounts() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  stakeBalanceAtHeight: <TData = Uint128,>({
    client,
    args,
    options
  }: StardexStakeNativeStakeBalanceAtHeightQuery<TData>): UseQueryOptions<Uint128, Error, TData> => ({
    queryKey: stardexStakeNativeQueryKeys.stakeBalanceAtHeight(client?.contractAddress, args),
    queryFn: () => client ? client.stakeBalanceAtHeight({
      address: args.address,
      height: args.height
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface StardexStakeNativeReactQuery<TResponse, TData = TResponse> {
  client: StardexStakeNativeQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface StardexStakeNativeStakeBalanceAtHeightQuery<TData> extends StardexStakeNativeReactQuery<Uint128, TData> {
  args: {
    address: string;
    height?: number;
  };
}
export function useStardexStakeNativeStakeBalanceAtHeightQuery<TData = Uint128>({
  client,
  args,
  options
}: StardexStakeNativeStakeBalanceAtHeightQuery<TData>) {
  return useQuery<Uint128, Error, TData>(stardexStakeNativeQueryKeys.stakeBalanceAtHeight(client?.contractAddress, args), () => client ? client.stakeBalanceAtHeight({
    address: args.address,
    height: args.height
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexStakeNativeRewardAccountsQuery<TData> extends StardexStakeNativeReactQuery<ArrayOfAddr, TData> {}
export function useStardexStakeNativeRewardAccountsQuery<TData = ArrayOfAddr>({
  client,
  options
}: StardexStakeNativeRewardAccountsQuery<TData>) {
  return useQuery<ArrayOfAddr, Error, TData>(stardexStakeNativeQueryKeys.rewardAccounts(client?.contractAddress), () => client ? client.rewardAccounts() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexStakeNativeClaimRewardsMutation {
  client: StardexStakeNativeClient;
  msg: {
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexStakeNativeClaimRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeClaimRewardsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexStakeNativeClaimRewardsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claimRewards(msg, fee, memo, funds), options);
}
export interface StardexStakeNativeClaimMutation {
  client: StardexStakeNativeClient;
  msg: {
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexStakeNativeClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexStakeNativeClaimMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(msg, fee, memo, funds), options);
}
export interface StardexStakeNativeUnstakeMutation {
  client: StardexStakeNativeClient;
  msg: {
    amount: Uint128;
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexStakeNativeUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeUnstakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexStakeNativeUnstakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unstake(msg, fee, memo, funds), options);
}
export interface StardexStakeNativeStakeMutation {
  client: StardexStakeNativeClient;
  msg: {
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexStakeNativeStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeStakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexStakeNativeStakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.stake(msg, fee, memo, funds), options);
}
export interface StardexStakeNativeRemoveRewardAccountMutation {
  client: StardexStakeNativeClient;
  msg: {
    rewardAccount: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexStakeNativeRemoveRewardAccountMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeRemoveRewardAccountMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexStakeNativeRemoveRewardAccountMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeRewardAccount(msg, fee, memo, funds), options);
}
export interface StardexStakeNativeCreateRewardAccountMutation {
  client: StardexStakeNativeClient;
  msg: {
    denom: string;
    durationSec: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexStakeNativeCreateRewardAccountMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeCreateRewardAccountMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexStakeNativeCreateRewardAccountMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createRewardAccount(msg, fee, memo, funds), options);
}
export interface StardexStakeNativeUpdateConfigMutation {
  client: StardexStakeNativeClient;
  msg: {
    rewardsCodeId?: number;
    unstakingDurationSec?: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexStakeNativeUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexStakeNativeUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}