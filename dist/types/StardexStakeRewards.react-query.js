"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useStardexStakeRewardsStakeChangeMutation = exports.useStardexStakeRewardsClaimRewardsMutation = exports.useStardexStakeRewardsUserRewardQuery = exports.stardexStakeRewardsQueries = exports.stardexStakeRewardsQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.stardexStakeRewardsQueryKeys = {
    contract: [{
            contract: "stardexStakeRewards"
        }],
    address: (contractAddress) => [{
            ...exports.stardexStakeRewardsQueryKeys.contract[0],
            address: contractAddress
        }],
    userReward: (contractAddress, args) => [{
            ...exports.stardexStakeRewardsQueryKeys.address(contractAddress)[0],
            method: "user_reward",
            args
        }]
};
exports.stardexStakeRewardsQueries = {
    userReward: ({ client, args, options }) => ({
        queryKey: exports.stardexStakeRewardsQueryKeys.userReward(client?.contractAddress, args),
        queryFn: () => client ? client.userReward({
            address: args.address
        }) : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    })
};
function useStardexStakeRewardsUserRewardQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.stardexStakeRewardsQueryKeys.userReward(client?.contractAddress, args), () => client ? client.userReward({
        address: args.address
    }) : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexStakeRewardsUserRewardQuery = useStardexStakeRewardsUserRewardQuery;
function useStardexStakeRewardsClaimRewardsMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.claimRewards(msg, fee, memo, funds), options);
}
exports.useStardexStakeRewardsClaimRewardsMutation = useStardexStakeRewardsClaimRewardsMutation;
function useStardexStakeRewardsStakeChangeMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.stakeChange(msg, fee, memo, funds), options);
}
exports.useStardexStakeRewardsStakeChangeMutation = useStardexStakeRewardsStakeChangeMutation;
