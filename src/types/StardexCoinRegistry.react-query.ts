/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, Addr, Config, CoinResponse, ArrayOfCoinResponse } from "./StardexCoinRegistry.types";
import { StardexCoinRegistryQueryClient, StardexCoinRegistryClient } from "./StardexCoinRegistry.client";
export const stardexCoinRegistryQueryKeys = {
  contract: ([{
    contract: "stardexCoinRegistry"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...stardexCoinRegistryQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexCoinRegistryQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  nativeToken: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexCoinRegistryQueryKeys.address(contractAddress)[0],
    method: "native_token",
    args
  }] as const),
  nativeTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexCoinRegistryQueryKeys.address(contractAddress)[0],
    method: "native_tokens",
    args
  }] as const)
};
export const stardexCoinRegistryQueries = {
  config: <TData = Config,>({
    client,
    options
  }: StardexCoinRegistryConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: stardexCoinRegistryQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  nativeToken: <TData = CoinResponse,>({
    client,
    args,
    options
  }: StardexCoinRegistryNativeTokenQuery<TData>): UseQueryOptions<CoinResponse, Error, TData> => ({
    queryKey: stardexCoinRegistryQueryKeys.nativeToken(client?.contractAddress, args),
    queryFn: () => client ? client.nativeToken({
      denom: args.denom
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  nativeTokens: <TData = ArrayOfCoinResponse,>({
    client,
    args,
    options
  }: StardexCoinRegistryNativeTokensQuery<TData>): UseQueryOptions<ArrayOfCoinResponse, Error, TData> => ({
    queryKey: stardexCoinRegistryQueryKeys.nativeTokens(client?.contractAddress, args),
    queryFn: () => client ? client.nativeTokens({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface StardexCoinRegistryReactQuery<TResponse, TData = TResponse> {
  client: StardexCoinRegistryQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface StardexCoinRegistryNativeTokensQuery<TData> extends StardexCoinRegistryReactQuery<ArrayOfCoinResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useStardexCoinRegistryNativeTokensQuery<TData = ArrayOfCoinResponse>({
  client,
  args,
  options
}: StardexCoinRegistryNativeTokensQuery<TData>) {
  return useQuery<ArrayOfCoinResponse, Error, TData>(stardexCoinRegistryQueryKeys.nativeTokens(client?.contractAddress, args), () => client ? client.nativeTokens({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexCoinRegistryNativeTokenQuery<TData> extends StardexCoinRegistryReactQuery<CoinResponse, TData> {
  args: {
    denom: string;
  };
}
export function useStardexCoinRegistryNativeTokenQuery<TData = CoinResponse>({
  client,
  args,
  options
}: StardexCoinRegistryNativeTokenQuery<TData>) {
  return useQuery<CoinResponse, Error, TData>(stardexCoinRegistryQueryKeys.nativeToken(client?.contractAddress, args), () => client ? client.nativeToken({
    denom: args.denom
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexCoinRegistryConfigQuery<TData> extends StardexCoinRegistryReactQuery<Config, TData> {}
export function useStardexCoinRegistryConfigQuery<TData = Config>({
  client,
  options
}: StardexCoinRegistryConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(stardexCoinRegistryQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexCoinRegistryClaimOwnershipMutation {
  client: StardexCoinRegistryClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexCoinRegistryClaimOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexCoinRegistryClaimOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexCoinRegistryClaimOwnershipMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claimOwnership(fee, memo, funds), options);
}
export interface StardexCoinRegistryDropOwnershipProposalMutation {
  client: StardexCoinRegistryClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexCoinRegistryDropOwnershipProposalMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexCoinRegistryDropOwnershipProposalMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexCoinRegistryDropOwnershipProposalMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.dropOwnershipProposal(fee, memo, funds), options);
}
export interface StardexCoinRegistryProposeNewOwnerMutation {
  client: StardexCoinRegistryClient;
  msg: {
    expiresIn: number;
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexCoinRegistryProposeNewOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexCoinRegistryProposeNewOwnerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexCoinRegistryProposeNewOwnerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.proposeNewOwner(msg, fee, memo, funds), options);
}
export interface StardexCoinRegistryRemoveMutation {
  client: StardexCoinRegistryClient;
  msg: {
    nativeCoins: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexCoinRegistryRemoveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexCoinRegistryRemoveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexCoinRegistryRemoveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.remove(msg, fee, memo, funds), options);
}
export interface StardexCoinRegistryAddMutation {
  client: StardexCoinRegistryClient;
  msg: {
    nativeCoins: string[][];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexCoinRegistryAddMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexCoinRegistryAddMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexCoinRegistryAddMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.add(msg, fee, memo, funds), options);
}