"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractBase = exports.NO_MESSAGE_COMPOSER_ERROR_MESSAGE = exports.NO_QUERY_CLIENT_ERROR_MESSAGE = exports.NO_SIGNING_CLIENT_ERROR_MESSAGE = exports.NO_ADDRESS_ERROR_MESSAGE = exports.NO_COSMWASW_CLIENT_ERROR_MESSAGE = exports.NO_SINGING_ERROR_MESSAGE = void 0;
exports.NO_SINGING_ERROR_MESSAGE = 'signingCosmWasmClient not connected';
exports.NO_COSMWASW_CLIENT_ERROR_MESSAGE = 'cosmWasmClient not connected';
exports.NO_ADDRESS_ERROR_MESSAGE = "address doesn't exist";
exports.NO_SIGNING_CLIENT_ERROR_MESSAGE = 'Signing client is not generated. Please check ts-codegen config';
exports.NO_QUERY_CLIENT_ERROR_MESSAGE = 'Query client is not generated. Please check ts-codegen config';
exports.NO_MESSAGE_COMPOSER_ERROR_MESSAGE = 'Message composer client is not generated. Please check ts-codegen config';
class ContractBase {
    address;
    cosmWasmClient;
    signingCosmWasmClient;
    TSign;
    TQuery;
    TMsgComposer;
    constructor(address, cosmWasmClient, signingCosmWasmClient, TSign, TQuery, TMsgComposer) {
        this.address = address;
        this.cosmWasmClient = cosmWasmClient;
        this.signingCosmWasmClient = signingCosmWasmClient;
        this.TSign = TSign;
        this.TQuery = TQuery;
        this.TMsgComposer = TMsgComposer;
    }
    getSigningClient(contractAddr) {
        if (!this.signingCosmWasmClient)
            throw new Error(exports.NO_SINGING_ERROR_MESSAGE);
        if (!this.address)
            throw new Error(exports.NO_ADDRESS_ERROR_MESSAGE);
        if (!this.TSign)
            throw new Error(exports.NO_SIGNING_CLIENT_ERROR_MESSAGE);
        return new this.TSign(this.signingCosmWasmClient, this.address, contractAddr);
    }
    getQueryClient(contractAddr) {
        if (!this.cosmWasmClient)
            throw new Error(exports.NO_COSMWASW_CLIENT_ERROR_MESSAGE);
        if (!this.TQuery)
            throw new Error(exports.NO_QUERY_CLIENT_ERROR_MESSAGE);
        return new this.TQuery(this.cosmWasmClient, contractAddr);
    }
    getMessageComposer(contractAddr) {
        if (!this.address)
            throw new Error(exports.NO_ADDRESS_ERROR_MESSAGE);
        if (!this.TMsgComposer)
            throw new Error(exports.NO_MESSAGE_COMPOSER_ERROR_MESSAGE);
        return new this.TMsgComposer(this.address, contractAddr);
    }
}
exports.ContractBase = ContractBase;
