/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Uint128, ArrayOfAddr } from "./StardexStakeNative.types";
import { StardexStakeNativeQueryClient, StardexStakeNativeClient } from "./StardexStakeNative.client";
export declare const stardexStakeNativeQueryKeys: {
    contract: readonly [{
        readonly contract: "stardexStakeNative";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "stardexStakeNative";
    }];
    rewardAccounts: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "reward_accounts";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexStakeNative";
    }];
    stakeBalanceAtHeight: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "stake_balance_at_height";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexStakeNative";
    }];
};
export declare const stardexStakeNativeQueries: {
    rewardAccounts: <TData = ArrayOfAddr>({ client, options }: StardexStakeNativeRewardAccountsQuery<TData>) => UseQueryOptions<ArrayOfAddr, Error, TData, import("@tanstack/react-query").QueryKey>;
    stakeBalanceAtHeight: <TData_1 = string>({ client, args, options }: StardexStakeNativeStakeBalanceAtHeightQuery<TData_1>) => UseQueryOptions<string, Error, TData_1, import("@tanstack/react-query").QueryKey>;
};
export interface StardexStakeNativeReactQuery<TResponse, TData = TResponse> {
    client: StardexStakeNativeQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface StardexStakeNativeStakeBalanceAtHeightQuery<TData> extends StardexStakeNativeReactQuery<Uint128, TData> {
    args: {
        address: string;
        height?: number;
    };
}
export declare function useStardexStakeNativeStakeBalanceAtHeightQuery<TData = Uint128>({ client, args, options }: StardexStakeNativeStakeBalanceAtHeightQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexStakeNativeRewardAccountsQuery<TData> extends StardexStakeNativeReactQuery<ArrayOfAddr, TData> {
}
export declare function useStardexStakeNativeRewardAccountsQuery<TData = ArrayOfAddr>({ client, options }: StardexStakeNativeRewardAccountsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexStakeNativeClaimRewardsMutation {
    client: StardexStakeNativeClient;
    msg: {
        recipient?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexStakeNativeClaimRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeClaimRewardsMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexStakeNativeClaimRewardsMutation, unknown>;
export interface StardexStakeNativeClaimMutation {
    client: StardexStakeNativeClient;
    msg: {
        recipient?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexStakeNativeClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeClaimMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexStakeNativeClaimMutation, unknown>;
export interface StardexStakeNativeUnstakeMutation {
    client: StardexStakeNativeClient;
    msg: {
        amount: Uint128;
        recipient?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexStakeNativeUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeUnstakeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexStakeNativeUnstakeMutation, unknown>;
export interface StardexStakeNativeStakeMutation {
    client: StardexStakeNativeClient;
    msg: {
        recipient?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexStakeNativeStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeStakeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexStakeNativeStakeMutation, unknown>;
export interface StardexStakeNativeRemoveRewardAccountMutation {
    client: StardexStakeNativeClient;
    msg: {
        rewardAccount: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexStakeNativeRemoveRewardAccountMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeRemoveRewardAccountMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexStakeNativeRemoveRewardAccountMutation, unknown>;
export interface StardexStakeNativeCreateRewardAccountMutation {
    client: StardexStakeNativeClient;
    msg: {
        denom: string;
        durationSec: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexStakeNativeCreateRewardAccountMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeCreateRewardAccountMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexStakeNativeCreateRewardAccountMutation, unknown>;
export interface StardexStakeNativeUpdateConfigMutation {
    client: StardexStakeNativeClient;
    msg: {
        rewardsCodeId?: number;
        unstakingDurationSec?: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexStakeNativeUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeNativeUpdateConfigMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexStakeNativeUpdateConfigMutation, unknown>;
