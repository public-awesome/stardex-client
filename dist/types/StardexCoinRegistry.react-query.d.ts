/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Config, CoinResponse, ArrayOfCoinResponse } from "./StardexCoinRegistry.types";
import { StardexCoinRegistryQueryClient, StardexCoinRegistryClient } from "./StardexCoinRegistry.client";
export declare const stardexCoinRegistryQueryKeys: {
    contract: readonly [{
        readonly contract: "stardexCoinRegistry";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "stardexCoinRegistry";
    }];
    config: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "config";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexCoinRegistry";
    }];
    nativeToken: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "native_token";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexCoinRegistry";
    }];
    nativeTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "native_tokens";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexCoinRegistry";
    }];
};
export declare const stardexCoinRegistryQueries: {
    config: <TData = Config>({ client, options }: StardexCoinRegistryConfigQuery<TData>) => UseQueryOptions<Config, Error, TData, import("@tanstack/react-query").QueryKey>;
    nativeToken: <TData_1 = CoinResponse>({ client, args, options }: StardexCoinRegistryNativeTokenQuery<TData_1>) => UseQueryOptions<CoinResponse, Error, TData_1, import("@tanstack/react-query").QueryKey>;
    nativeTokens: <TData_2 = ArrayOfCoinResponse>({ client, args, options }: StardexCoinRegistryNativeTokensQuery<TData_2>) => UseQueryOptions<ArrayOfCoinResponse, Error, TData_2, import("@tanstack/react-query").QueryKey>;
};
export interface StardexCoinRegistryReactQuery<TResponse, TData = TResponse> {
    client: StardexCoinRegistryQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface StardexCoinRegistryNativeTokensQuery<TData> extends StardexCoinRegistryReactQuery<ArrayOfCoinResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useStardexCoinRegistryNativeTokensQuery<TData = ArrayOfCoinResponse>({ client, args, options }: StardexCoinRegistryNativeTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexCoinRegistryNativeTokenQuery<TData> extends StardexCoinRegistryReactQuery<CoinResponse, TData> {
    args: {
        denom: string;
    };
}
export declare function useStardexCoinRegistryNativeTokenQuery<TData = CoinResponse>({ client, args, options }: StardexCoinRegistryNativeTokenQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexCoinRegistryConfigQuery<TData> extends StardexCoinRegistryReactQuery<Config, TData> {
}
export declare function useStardexCoinRegistryConfigQuery<TData = Config>({ client, options }: StardexCoinRegistryConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexCoinRegistryClaimOwnershipMutation {
    client: StardexCoinRegistryClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexCoinRegistryClaimOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexCoinRegistryClaimOwnershipMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexCoinRegistryClaimOwnershipMutation, unknown>;
export interface StardexCoinRegistryDropOwnershipProposalMutation {
    client: StardexCoinRegistryClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexCoinRegistryDropOwnershipProposalMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexCoinRegistryDropOwnershipProposalMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexCoinRegistryDropOwnershipProposalMutation, unknown>;
export interface StardexCoinRegistryProposeNewOwnerMutation {
    client: StardexCoinRegistryClient;
    msg: {
        expiresIn: number;
        owner: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexCoinRegistryProposeNewOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexCoinRegistryProposeNewOwnerMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexCoinRegistryProposeNewOwnerMutation, unknown>;
export interface StardexCoinRegistryRemoveMutation {
    client: StardexCoinRegistryClient;
    msg: {
        nativeCoins: string[];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexCoinRegistryRemoveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexCoinRegistryRemoveMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexCoinRegistryRemoveMutation, unknown>;
export interface StardexCoinRegistryAddMutation {
    client: StardexCoinRegistryClient;
    msg: {
        nativeCoins: string[][];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexCoinRegistryAddMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexCoinRegistryAddMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexCoinRegistryAddMutation, unknown>;
