/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Uint128, NullableUserReward } from "./StardexStakeRewards.types";
import { StardexStakeRewardsQueryClient, StardexStakeRewardsClient } from "./StardexStakeRewards.client";
export declare const stardexStakeRewardsQueryKeys: {
    contract: readonly [{
        readonly contract: "stardexStakeRewards";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "stardexStakeRewards";
    }];
    userReward: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "user_reward";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexStakeRewards";
    }];
};
export declare const stardexStakeRewardsQueries: {
    userReward: <TData = NullableUserReward>({ client, args, options }: StardexStakeRewardsUserRewardQuery<TData>) => UseQueryOptions<NullableUserReward, Error, TData, import("@tanstack/react-query").QueryKey>;
};
export interface StardexStakeRewardsReactQuery<TResponse, TData = TResponse> {
    client: StardexStakeRewardsQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface StardexStakeRewardsUserRewardQuery<TData> extends StardexStakeRewardsReactQuery<NullableUserReward, TData> {
    args: {
        address: string;
    };
}
export declare function useStardexStakeRewardsUserRewardQuery<TData = NullableUserReward>({ client, args, options }: StardexStakeRewardsUserRewardQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexStakeRewardsClaimRewardsMutation {
    client: StardexStakeRewardsClient;
    msg: {
        recipient: string;
        stakedAmount: Uint128;
        totalStaked: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexStakeRewardsClaimRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeRewardsClaimRewardsMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexStakeRewardsClaimRewardsMutation, unknown>;
export interface StardexStakeRewardsStakeChangeMutation {
    client: StardexStakeRewardsClient;
    msg: {
        recipient: string;
        stakedAmount: Uint128;
        totalStaked: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexStakeRewardsStakeChangeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeRewardsStakeChangeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexStakeRewardsStakeChangeMutation, unknown>;
