"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.StardexTokenClient = exports.StardexTokenQueryClient = void 0;
class StardexTokenQueryClient {
    client;
    contractAddress;
    constructor(client, contractAddress) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.balance = this.balance.bind(this);
        this.tokenInfo = this.tokenInfo.bind(this);
        this.minter = this.minter.bind(this);
        this.allowance = this.allowance.bind(this);
        this.allAllowances = this.allAllowances.bind(this);
        this.allSpenderAllowances = this.allSpenderAllowances.bind(this);
        this.allAccounts = this.allAccounts.bind(this);
        this.marketingInfo = this.marketingInfo.bind(this);
        this.downloadLogo = this.downloadLogo.bind(this);
    }
    balance = async ({ address }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            balance: {
                address
            }
        });
    };
    tokenInfo = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            token_info: {}
        });
    };
    minter = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            minter: {}
        });
    };
    allowance = async ({ owner, spender }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            allowance: {
                owner,
                spender
            }
        });
    };
    allAllowances = async ({ limit, owner, startAfter }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            all_allowances: {
                limit,
                owner,
                start_after: startAfter
            }
        });
    };
    allSpenderAllowances = async ({ limit, spender, startAfter }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            all_spender_allowances: {
                limit,
                spender,
                start_after: startAfter
            }
        });
    };
    allAccounts = async ({ limit, startAfter }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            all_accounts: {
                limit,
                start_after: startAfter
            }
        });
    };
    marketingInfo = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            marketing_info: {}
        });
    };
    downloadLogo = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            download_logo: {}
        });
    };
}
exports.StardexTokenQueryClient = StardexTokenQueryClient;
class StardexTokenClient extends StardexTokenQueryClient {
    client;
    sender;
    contractAddress;
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.transfer = this.transfer.bind(this);
        this.burn = this.burn.bind(this);
        this.send = this.send.bind(this);
        this.increaseAllowance = this.increaseAllowance.bind(this);
        this.decreaseAllowance = this.decreaseAllowance.bind(this);
        this.transferFrom = this.transferFrom.bind(this);
        this.sendFrom = this.sendFrom.bind(this);
        this.burnFrom = this.burnFrom.bind(this);
        this.mint = this.mint.bind(this);
        this.updateMinter = this.updateMinter.bind(this);
        this.updateMarketing = this.updateMarketing.bind(this);
        this.uploadLogo = this.uploadLogo.bind(this);
    }
    transfer = async ({ amount, recipient }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            transfer: {
                amount,
                recipient
            }
        }, fee, memo, _funds);
    };
    burn = async ({ amount }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            burn: {
                amount
            }
        }, fee, memo, _funds);
    };
    send = async ({ amount, contract, msg }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            send: {
                amount,
                contract,
                msg
            }
        }, fee, memo, _funds);
    };
    increaseAllowance = async ({ amount, expires, spender }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            increase_allowance: {
                amount,
                expires,
                spender
            }
        }, fee, memo, _funds);
    };
    decreaseAllowance = async ({ amount, expires, spender }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            decrease_allowance: {
                amount,
                expires,
                spender
            }
        }, fee, memo, _funds);
    };
    transferFrom = async ({ amount, owner, recipient }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            transfer_from: {
                amount,
                owner,
                recipient
            }
        }, fee, memo, _funds);
    };
    sendFrom = async ({ amount, contract, msg, owner }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            send_from: {
                amount,
                contract,
                msg,
                owner
            }
        }, fee, memo, _funds);
    };
    burnFrom = async ({ amount, owner }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            burn_from: {
                amount,
                owner
            }
        }, fee, memo, _funds);
    };
    mint = async ({ amount, recipient }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            mint: {
                amount,
                recipient
            }
        }, fee, memo, _funds);
    };
    updateMinter = async ({ newMinter }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_minter: {
                new_minter: newMinter
            }
        }, fee, memo, _funds);
    };
    updateMarketing = async ({ description, marketing, project }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            update_marketing: {
                description,
                marketing,
                project
            }
        }, fee, memo, _funds);
    };
    uploadLogo = async (logo, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            upload_logo: logo
        }, fee, memo, _funds);
    };
}
exports.StardexTokenClient = StardexTokenClient;
