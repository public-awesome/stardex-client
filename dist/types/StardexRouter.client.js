"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.StardexRouterClient = exports.StardexRouterQueryClient = void 0;
class StardexRouterQueryClient {
    client;
    contractAddress;
    constructor(client, contractAddress) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.config = this.config.bind(this);
        this.simulateSwapOperations = this.simulateSwapOperations.bind(this);
    }
    config = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            config: {}
        });
    };
    simulateSwapOperations = async ({ offerAmount, operations }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            simulate_swap_operations: {
                offer_amount: offerAmount,
                operations
            }
        });
    };
}
exports.StardexRouterQueryClient = StardexRouterQueryClient;
class StardexRouterClient extends StardexRouterQueryClient {
    client;
    sender;
    contractAddress;
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.receive = this.receive.bind(this);
        this.executeSwapOperations = this.executeSwapOperations.bind(this);
        this.executeSwapOperation = this.executeSwapOperation.bind(this);
    }
    receive = async ({ amount, msg, sender }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            receive: {
                amount,
                msg,
                sender
            }
        }, fee, memo, _funds);
    };
    executeSwapOperations = async ({ maxSpread, minimumReceive, operations, to }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            execute_swap_operations: {
                max_spread: maxSpread,
                minimum_receive: minimumReceive,
                operations,
                to
            }
        }, fee, memo, _funds);
    };
    executeSwapOperation = async ({ maxSpread, operation, single, to }, fee = "auto", memo, _funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            execute_swap_operation: {
                max_spread: maxSpread,
                operation,
                single,
                to
            }
        }, fee, memo, _funds);
    };
}
exports.StardexRouterClient = StardexRouterClient;
