/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { AssetInfo, Binary, Uint128, Decimal, Asset, Uint64, NullableUint128, ConfigResponse, CumulativePricesResponse, OracleObservation, PairInfo, PoolResponse, ReverseSimulationResponse, ArrayOfAsset, SimulationResponse } from "./StardexPair.types";
import { StardexPairQueryClient, StardexPairClient } from "./StardexPair.client";
export declare const stardexPairQueryKeys: {
    contract: readonly [{
        readonly contract: "stardexPair";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "stardexPair";
    }];
    pair: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "pair";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPair";
    }];
    pool: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "pool";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPair";
    }];
    config: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "config";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPair";
    }];
    share: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "share";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPair";
    }];
    simulation: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "simulation";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPair";
    }];
    reverseSimulation: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "reverse_simulation";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPair";
    }];
    cumulativePrices: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "cumulative_prices";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPair";
    }];
    queryComputeD: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "query_compute_d";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPair";
    }];
    assetBalanceAt: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "asset_balance_at";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPair";
    }];
    observe: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "observe";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPair";
    }];
    simulateWithdraw: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "simulate_withdraw";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPair";
    }];
    simulateProvide: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "simulate_provide";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexPair";
    }];
};
export declare const stardexPairQueries: {
    pair: <TData = PairInfo>({ client, options }: StardexPairPairQuery<TData>) => UseQueryOptions<PairInfo, Error, TData, import("@tanstack/react-query").QueryKey>;
    pool: <TData_1 = PoolResponse>({ client, options }: StardexPairPoolQuery<TData_1>) => UseQueryOptions<PoolResponse, Error, TData_1, import("@tanstack/react-query").QueryKey>;
    config: <TData_2 = ConfigResponse>({ client, options }: StardexPairConfigQuery<TData_2>) => UseQueryOptions<ConfigResponse, Error, TData_2, import("@tanstack/react-query").QueryKey>;
    share: <TData_3 = ArrayOfAsset>({ client, args, options }: StardexPairShareQuery<TData_3>) => UseQueryOptions<ArrayOfAsset, Error, TData_3, import("@tanstack/react-query").QueryKey>;
    simulation: <TData_4 = SimulationResponse>({ client, args, options }: StardexPairSimulationQuery<TData_4>) => UseQueryOptions<SimulationResponse, Error, TData_4, import("@tanstack/react-query").QueryKey>;
    reverseSimulation: <TData_5 = ReverseSimulationResponse>({ client, args, options }: StardexPairReverseSimulationQuery<TData_5>) => UseQueryOptions<ReverseSimulationResponse, Error, TData_5, import("@tanstack/react-query").QueryKey>;
    cumulativePrices: <TData_6 = CumulativePricesResponse>({ client, options }: StardexPairCumulativePricesQuery<TData_6>) => UseQueryOptions<CumulativePricesResponse, Error, TData_6, import("@tanstack/react-query").QueryKey>;
    queryComputeD: <TData_7 = string>({ client, options }: StardexPairQueryComputeDQuery<TData_7>) => UseQueryOptions<string, Error, TData_7, import("@tanstack/react-query").QueryKey>;
    assetBalanceAt: <TData_8 = NullableUint128>({ client, args, options }: StardexPairAssetBalanceAtQuery<TData_8>) => UseQueryOptions<NullableUint128, Error, TData_8, import("@tanstack/react-query").QueryKey>;
    observe: <TData_9 = OracleObservation>({ client, args, options }: StardexPairObserveQuery<TData_9>) => UseQueryOptions<OracleObservation, Error, TData_9, import("@tanstack/react-query").QueryKey>;
    simulateWithdraw: <TData_10 = ArrayOfAsset>({ client, args, options }: StardexPairSimulateWithdrawQuery<TData_10>) => UseQueryOptions<ArrayOfAsset, Error, TData_10, import("@tanstack/react-query").QueryKey>;
    simulateProvide: <TData_11 = string>({ client, args, options }: StardexPairSimulateProvideQuery<TData_11>) => UseQueryOptions<string, Error, TData_11, import("@tanstack/react-query").QueryKey>;
};
export interface StardexPairReactQuery<TResponse, TData = TResponse> {
    client: StardexPairQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface StardexPairSimulateProvideQuery<TData> extends StardexPairReactQuery<Uint128, TData> {
    args: {
        assets: Asset[];
        slippageTolerance?: Decimal;
    };
}
export declare function useStardexPairSimulateProvideQuery<TData = Uint128>({ client, args, options }: StardexPairSimulateProvideQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairSimulateWithdrawQuery<TData> extends StardexPairReactQuery<ArrayOfAsset, TData> {
    args: {
        lpAmount: Uint128;
    };
}
export declare function useStardexPairSimulateWithdrawQuery<TData = ArrayOfAsset>({ client, args, options }: StardexPairSimulateWithdrawQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairObserveQuery<TData> extends StardexPairReactQuery<OracleObservation, TData> {
    args: {
        secondsAgo: number;
    };
}
export declare function useStardexPairObserveQuery<TData = OracleObservation>({ client, args, options }: StardexPairObserveQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairAssetBalanceAtQuery<TData> extends StardexPairReactQuery<NullableUint128, TData> {
    args: {
        assetInfo: AssetInfo;
        blockHeight: Uint64;
    };
}
export declare function useStardexPairAssetBalanceAtQuery<TData = NullableUint128>({ client, args, options }: StardexPairAssetBalanceAtQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairQueryComputeDQuery<TData> extends StardexPairReactQuery<Uint128, TData> {
}
export declare function useStardexPairQueryComputeDQuery<TData = Uint128>({ client, options }: StardexPairQueryComputeDQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairCumulativePricesQuery<TData> extends StardexPairReactQuery<CumulativePricesResponse, TData> {
}
export declare function useStardexPairCumulativePricesQuery<TData = CumulativePricesResponse>({ client, options }: StardexPairCumulativePricesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairReverseSimulationQuery<TData> extends StardexPairReactQuery<ReverseSimulationResponse, TData> {
    args: {
        askAsset: Asset;
        offerAssetInfo?: AssetInfo;
    };
}
export declare function useStardexPairReverseSimulationQuery<TData = ReverseSimulationResponse>({ client, args, options }: StardexPairReverseSimulationQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairSimulationQuery<TData> extends StardexPairReactQuery<SimulationResponse, TData> {
    args: {
        askAssetInfo?: AssetInfo;
        offerAsset: Asset;
    };
}
export declare function useStardexPairSimulationQuery<TData = SimulationResponse>({ client, args, options }: StardexPairSimulationQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairShareQuery<TData> extends StardexPairReactQuery<ArrayOfAsset, TData> {
    args: {
        amount: Uint128;
    };
}
export declare function useStardexPairShareQuery<TData = ArrayOfAsset>({ client, args, options }: StardexPairShareQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairConfigQuery<TData> extends StardexPairReactQuery<ConfigResponse, TData> {
}
export declare function useStardexPairConfigQuery<TData = ConfigResponse>({ client, options }: StardexPairConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairPoolQuery<TData> extends StardexPairReactQuery<PoolResponse, TData> {
}
export declare function useStardexPairPoolQuery<TData = PoolResponse>({ client, options }: StardexPairPoolQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairPairQuery<TData> extends StardexPairReactQuery<PairInfo, TData> {
}
export declare function useStardexPairPairQuery<TData = PairInfo>({ client, options }: StardexPairPairQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexPairClaimOwnershipMutation {
    client: StardexPairClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairClaimOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairClaimOwnershipMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairClaimOwnershipMutation, unknown>;
export interface StardexPairDropOwnershipProposalMutation {
    client: StardexPairClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairDropOwnershipProposalMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairDropOwnershipProposalMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairDropOwnershipProposalMutation, unknown>;
export interface StardexPairProposeNewOwnerMutation {
    client: StardexPairClient;
    msg: {
        expiresIn: number;
        owner: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairProposeNewOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairProposeNewOwnerMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairProposeNewOwnerMutation, unknown>;
export interface StardexPairUpdateConfigMutation {
    client: StardexPairClient;
    msg: {
        params: Binary;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairUpdateConfigMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairUpdateConfigMutation, unknown>;
export interface StardexPairSwapMutation {
    client: StardexPairClient;
    msg: {
        askAssetInfo?: AssetInfo;
        beliefPrice?: Decimal;
        maxSpread?: Decimal;
        offerAsset: Asset;
        to?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairSwapMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairSwapMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairSwapMutation, unknown>;
export interface StardexPairWithdrawLiquidityMutation {
    client: StardexPairClient;
    msg: {
        assets?: Asset[];
        minAssetsToReceive?: Asset[];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairWithdrawLiquidityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairWithdrawLiquidityMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairWithdrawLiquidityMutation, unknown>;
export interface StardexPairProvideLiquidityMutation {
    client: StardexPairClient;
    msg: {
        assets: Asset[];
        autoStake?: boolean;
        minLpToReceive?: Uint128;
        receiver?: string;
        slippageTolerance?: Decimal;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairProvideLiquidityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairProvideLiquidityMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairProvideLiquidityMutation, unknown>;
export interface StardexPairReceiveMutation {
    client: StardexPairClient;
    msg: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexPairReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexPairReceiveMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexPairReceiveMutation, unknown>;
