"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeMsgSchema = exports.pairsResponseSchema = exports.pairInfoSchema = exports.queryMsgSchema = exports.assetInfoSchema = exports.instantiateMsgSchema = exports.feeInfoResponseSchema = exports.configResponseSchema = exports.arrayOfPairTypeSchema = exports.addrSchema = exports.binarySchema = exports.trackerConfigSchema = exports.pairConfigSchema = exports.pairTypeSchema = void 0;
// Generated by ts-to-zod
const zod_1 = require("zod");
exports.pairTypeSchema = zod_1.z.union([
    zod_1.z.object({
        xyk: zod_1.z.object({}),
    }),
    zod_1.z.object({
        stable: zod_1.z.object({}),
    }),
    zod_1.z.object({
        custom: zod_1.z.string(),
    }),
]);
exports.pairConfigSchema = zod_1.z.object({
    code_id: zod_1.z.number(),
    is_disabled: zod_1.z.boolean().optional(),
    is_generator_disabled: zod_1.z.boolean().optional(),
    maker_fee_bps: zod_1.z.number(),
    pair_type: exports.pairTypeSchema,
    permissioned: zod_1.z.boolean().optional(),
    total_fee_bps: zod_1.z.number(),
});
exports.trackerConfigSchema = zod_1.z.object({
    code_id: zod_1.z.number(),
    token_factory_addr: zod_1.z.string(),
});
exports.binarySchema = zod_1.z.string();
exports.addrSchema = zod_1.z.string();
exports.arrayOfPairTypeSchema = zod_1.z.array(exports.pairTypeSchema);
exports.configResponseSchema = zod_1.z.object({
    coin_registry_address: exports.addrSchema,
    fee_address: exports.addrSchema.optional().nullable(),
    generator_address: exports.addrSchema.optional().nullable(),
    owner: exports.addrSchema,
    pair_configs: zod_1.z.array(exports.pairConfigSchema),
    token_code_id: zod_1.z.number(),
    whitelist_code_id: zod_1.z.number(),
});
exports.feeInfoResponseSchema = zod_1.z.object({
    fee_address: exports.addrSchema.optional().nullable(),
    maker_fee_bps: zod_1.z.number(),
    total_fee_bps: zod_1.z.number(),
});
exports.instantiateMsgSchema = zod_1.z.object({
    coin_registry_address: zod_1.z.string(),
    fee_address: zod_1.z.string().optional().nullable(),
    generator_address: zod_1.z.string().optional().nullable(),
    owner: zod_1.z.string(),
    pair_configs: zod_1.z.array(exports.pairConfigSchema),
    token_code_id: zod_1.z.number(),
    tracker_config: exports.trackerConfigSchema.optional().nullable(),
    whitelist_code_id: zod_1.z.number(),
});
exports.assetInfoSchema = zod_1.z.union([
    zod_1.z.object({
        token: zod_1.z.object({
            contract_addr: exports.addrSchema,
        }),
    }),
    zod_1.z.object({
        native_token: zod_1.z.object({
            denom: zod_1.z.string(),
        }),
    }),
]);
exports.queryMsgSchema = zod_1.z.union([
    zod_1.z.object({
        config: zod_1.z.object({}),
    }),
    zod_1.z.object({
        pair: zod_1.z.object({
            asset_infos: zod_1.z.array(exports.assetInfoSchema),
        }),
    }),
    zod_1.z.object({
        pairs: zod_1.z.object({
            limit: zod_1.z.number().optional().nullable(),
            start_after: zod_1.z.array(exports.assetInfoSchema).optional().nullable(),
        }),
    }),
    zod_1.z.object({
        fee_info: zod_1.z.object({
            pair_type: exports.pairTypeSchema,
        }),
    }),
    zod_1.z.object({
        blacklisted_pair_types: zod_1.z.object({}),
    }),
    zod_1.z.object({
        tracker_config: zod_1.z.object({}),
    }),
]);
exports.pairInfoSchema = zod_1.z.object({
    asset_infos: zod_1.z.array(exports.assetInfoSchema),
    contract_addr: exports.addrSchema,
    liquidity_token: zod_1.z.string(),
    pair_type: exports.pairTypeSchema,
});
exports.pairsResponseSchema = zod_1.z.object({
    pairs: zod_1.z.array(exports.pairInfoSchema),
});
exports.executeMsgSchema = zod_1.z.union([
    zod_1.z.object({
        update_config: zod_1.z.object({
            coin_registry_address: zod_1.z.string().optional().nullable(),
            fee_address: zod_1.z.string().optional().nullable(),
            generator_address: zod_1.z.string().optional().nullable(),
            token_code_id: zod_1.z.number().optional().nullable(),
            whitelist_code_id: zod_1.z.number().optional().nullable(),
        }),
    }),
    zod_1.z.object({
        update_tracker_config: zod_1.z.object({
            token_factory_addr: zod_1.z.string().optional().nullable(),
            tracker_code_id: zod_1.z.number(),
        }),
    }),
    zod_1.z.object({
        update_pair_config: zod_1.z.object({
            config: exports.pairConfigSchema,
        }),
    }),
    zod_1.z.object({
        create_pair: zod_1.z.object({
            asset_infos: zod_1.z.array(exports.assetInfoSchema),
            init_params: exports.binarySchema.optional().nullable(),
            pair_type: exports.pairTypeSchema,
        }),
    }),
    zod_1.z.object({
        deregister: zod_1.z.object({
            asset_infos: zod_1.z.array(exports.assetInfoSchema),
        }),
    }),
    zod_1.z.object({
        propose_new_owner: zod_1.z.object({
            expires_in: zod_1.z.number(),
            owner: zod_1.z.string(),
        }),
    }),
    zod_1.z.object({
        drop_ownership_proposal: zod_1.z.object({}),
    }),
    zod_1.z.object({
        claim_ownership: zod_1.z.object({}),
    }),
]);
