/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, NullableUserReward } from "./StardexStakeRewards.types";
export interface StardexStakeRewardsReadOnlyInterface {
    contractAddress: string;
    userReward: ({ address }: {
        address: string;
    }) => Promise<NullableUserReward>;
}
export declare class StardexStakeRewardsQueryClient implements StardexStakeRewardsReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    userReward: ({ address }: {
        address: string;
    }) => Promise<NullableUserReward>;
}
export interface StardexStakeRewardsInterface extends StardexStakeRewardsReadOnlyInterface {
    contractAddress: string;
    sender: string;
    stakeChange: ({ recipient, stakedAmount, totalStaked }: {
        recipient: string;
        stakedAmount: Uint128;
        totalStaked: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claimRewards: ({ recipient, stakedAmount, totalStaked }: {
        recipient: string;
        stakedAmount: Uint128;
        totalStaked: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class StardexStakeRewardsClient extends StardexStakeRewardsQueryClient implements StardexStakeRewardsInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    stakeChange: ({ recipient, stakedAmount, totalStaked }: {
        recipient: string;
        stakedAmount: Uint128;
        totalStaked: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claimRewards: ({ recipient, stakedAmount, totalStaked }: {
        recipient: string;
        stakedAmount: Uint128;
        totalStaked: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
