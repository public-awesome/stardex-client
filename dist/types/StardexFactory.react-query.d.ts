/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { PairType, PairConfig, TrackerConfig, AssetInfo, Binary, ArrayOfPairType, ConfigResponse, FeeInfoResponse, PairInfo, PairsResponse } from "./StardexFactory.types";
import { StardexFactoryQueryClient, StardexFactoryClient } from "./StardexFactory.client";
export declare const stardexFactoryQueryKeys: {
    contract: readonly [{
        readonly contract: "stardexFactory";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "stardexFactory";
    }];
    config: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "config";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexFactory";
    }];
    pair: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "pair";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexFactory";
    }];
    pairs: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "pairs";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexFactory";
    }];
    feeInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "fee_info";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexFactory";
    }];
    blacklistedPairTypes: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "blacklisted_pair_types";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexFactory";
    }];
    trackerConfig: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "tracker_config";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "stardexFactory";
    }];
};
export declare const stardexFactoryQueries: {
    config: <TData = ConfigResponse>({ client, options }: StardexFactoryConfigQuery<TData>) => UseQueryOptions<ConfigResponse, Error, TData, import("@tanstack/react-query").QueryKey>;
    pair: <TData_1 = PairInfo>({ client, args, options }: StardexFactoryPairQuery<TData_1>) => UseQueryOptions<PairInfo, Error, TData_1, import("@tanstack/react-query").QueryKey>;
    pairs: <TData_2 = PairsResponse>({ client, args, options }: StardexFactoryPairsQuery<TData_2>) => UseQueryOptions<PairsResponse, Error, TData_2, import("@tanstack/react-query").QueryKey>;
    feeInfo: <TData_3 = FeeInfoResponse>({ client, args, options }: StardexFactoryFeeInfoQuery<TData_3>) => UseQueryOptions<FeeInfoResponse, Error, TData_3, import("@tanstack/react-query").QueryKey>;
    blacklistedPairTypes: <TData_4 = ArrayOfPairType>({ client, options }: StardexFactoryBlacklistedPairTypesQuery<TData_4>) => UseQueryOptions<ArrayOfPairType, Error, TData_4, import("@tanstack/react-query").QueryKey>;
    trackerConfig: <TData_5 = TrackerConfig>({ client, options }: StardexFactoryTrackerConfigQuery<TData_5>) => UseQueryOptions<TrackerConfig, Error, TData_5, import("@tanstack/react-query").QueryKey>;
};
export interface StardexFactoryReactQuery<TResponse, TData = TResponse> {
    client: StardexFactoryQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface StardexFactoryTrackerConfigQuery<TData> extends StardexFactoryReactQuery<TrackerConfig, TData> {
}
export declare function useStardexFactoryTrackerConfigQuery<TData = TrackerConfig>({ client, options }: StardexFactoryTrackerConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexFactoryBlacklistedPairTypesQuery<TData> extends StardexFactoryReactQuery<ArrayOfPairType, TData> {
}
export declare function useStardexFactoryBlacklistedPairTypesQuery<TData = ArrayOfPairType>({ client, options }: StardexFactoryBlacklistedPairTypesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexFactoryFeeInfoQuery<TData> extends StardexFactoryReactQuery<FeeInfoResponse, TData> {
    args: {
        pairType: PairType;
    };
}
export declare function useStardexFactoryFeeInfoQuery<TData = FeeInfoResponse>({ client, args, options }: StardexFactoryFeeInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexFactoryPairsQuery<TData> extends StardexFactoryReactQuery<PairsResponse, TData> {
    args: {
        limit?: number;
        startAfter?: AssetInfo[];
    };
}
export declare function useStardexFactoryPairsQuery<TData = PairsResponse>({ client, args, options }: StardexFactoryPairsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexFactoryPairQuery<TData> extends StardexFactoryReactQuery<PairInfo, TData> {
    args: {
        assetInfos: AssetInfo[];
    };
}
export declare function useStardexFactoryPairQuery<TData = PairInfo>({ client, args, options }: StardexFactoryPairQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexFactoryConfigQuery<TData> extends StardexFactoryReactQuery<ConfigResponse, TData> {
}
export declare function useStardexFactoryConfigQuery<TData = ConfigResponse>({ client, options }: StardexFactoryConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface StardexFactoryClaimOwnershipMutation {
    client: StardexFactoryClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexFactoryClaimOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexFactoryClaimOwnershipMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexFactoryClaimOwnershipMutation, unknown>;
export interface StardexFactoryDropOwnershipProposalMutation {
    client: StardexFactoryClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexFactoryDropOwnershipProposalMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexFactoryDropOwnershipProposalMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexFactoryDropOwnershipProposalMutation, unknown>;
export interface StardexFactoryProposeNewOwnerMutation {
    client: StardexFactoryClient;
    msg: {
        expiresIn: number;
        owner: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexFactoryProposeNewOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexFactoryProposeNewOwnerMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexFactoryProposeNewOwnerMutation, unknown>;
export interface StardexFactoryDeregisterMutation {
    client: StardexFactoryClient;
    msg: {
        assetInfos: AssetInfo[];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexFactoryDeregisterMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexFactoryDeregisterMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexFactoryDeregisterMutation, unknown>;
export interface StardexFactoryCreatePairMutation {
    client: StardexFactoryClient;
    msg: {
        assetInfos: AssetInfo[];
        initParams?: Binary;
        pairType: PairType;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexFactoryCreatePairMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexFactoryCreatePairMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexFactoryCreatePairMutation, unknown>;
export interface StardexFactoryUpdatePairConfigMutation {
    client: StardexFactoryClient;
    msg: {
        config: PairConfig;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexFactoryUpdatePairConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexFactoryUpdatePairConfigMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexFactoryUpdatePairConfigMutation, unknown>;
export interface StardexFactoryUpdateTrackerConfigMutation {
    client: StardexFactoryClient;
    msg: {
        tokenFactoryAddr?: string;
        trackerCodeId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexFactoryUpdateTrackerConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexFactoryUpdateTrackerConfigMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexFactoryUpdateTrackerConfigMutation, unknown>;
export interface StardexFactoryUpdateConfigMutation {
    client: StardexFactoryClient;
    msg: {
        coinRegistryAddress?: string;
        feeAddress?: string;
        generatorAddress?: string;
        tokenCodeId?: number;
        whitelistCodeId?: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStardexFactoryUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexFactoryUpdateConfigMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StardexFactoryUpdateConfigMutation, unknown>;
