/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import * as _0 from "./StardexToken.types";
import * as _1 from "./StardexToken.client";
import * as _2 from "./StardexToken.react-query";
import * as _3 from "./StardexToken.provider";
import * as _4 from "./StardexCoinRegistry.types";
import * as _5 from "./StardexCoinRegistry.client";
import * as _6 from "./StardexCoinRegistry.react-query";
import * as _7 from "./StardexCoinRegistry.provider";
import * as _8 from "./StardexFactory.types";
import * as _9 from "./StardexFactory.client";
import * as _10 from "./StardexFactory.react-query";
import * as _11 from "./StardexFactory.provider";
import * as _12 from "./StardexPair.types";
import * as _13 from "./StardexPair.client";
import * as _14 from "./StardexPair.react-query";
import * as _15 from "./StardexPair.provider";
import * as _16 from "./StardexPairStable.types";
import * as _17 from "./StardexPairStable.client";
import * as _18 from "./StardexPairStable.react-query";
import * as _19 from "./StardexPairStable.provider";
import * as _20 from "./StardexPairConcentrated.types";
import * as _21 from "./StardexPairConcentrated.client";
import * as _22 from "./StardexPairConcentrated.react-query";
import * as _23 from "./StardexPairConcentrated.provider";
import * as _24 from "./StardexRouter.types";
import * as _25 from "./StardexRouter.client";
import * as _26 from "./StardexRouter.react-query";
import * as _27 from "./StardexRouter.provider";
import * as _28 from "./StardexStakeNative.types";
import * as _29 from "./StardexStakeNative.client";
import * as _30 from "./StardexStakeNative.react-query";
import * as _31 from "./StardexStakeNative.provider";
import * as _32 from "./StardexStakeRewards.types";
import * as _33 from "./StardexStakeRewards.client";
import * as _34 from "./StardexStakeRewards.react-query";
import * as _35 from "./StardexStakeRewards.provider";
import * as _36 from "./contractContextProviders";
import * as _37 from "./contractContextBase";
import * as _38 from "./contracts-context";
export declare namespace contracts {
    const StardexToken: {
        StardexToken: typeof _3.StardexToken;
        useStardexTokenDownloadLogoQuery<TData = _0.DownloadLogoResponse>({ client, options }: _2.StardexTokenDownloadLogoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useStardexTokenMarketingInfoQuery<TData_1 = _0.MarketingInfoResponse>({ client, options }: _2.StardexTokenMarketingInfoQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
        useStardexTokenAllAccountsQuery<TData_2 = _0.AllAccountsResponse>({ client, args, options }: _2.StardexTokenAllAccountsQuery<TData_2>): import("@tanstack/react-query").UseQueryResult<TData_2, Error>;
        useStardexTokenAllSpenderAllowancesQuery<TData_3 = _0.AllSpenderAllowancesResponse>({ client, args, options }: _2.StardexTokenAllSpenderAllowancesQuery<TData_3>): import("@tanstack/react-query").UseQueryResult<TData_3, Error>;
        useStardexTokenAllAllowancesQuery<TData_4 = _0.AllAllowancesResponse>({ client, args, options }: _2.StardexTokenAllAllowancesQuery<TData_4>): import("@tanstack/react-query").UseQueryResult<TData_4, Error>;
        useStardexTokenAllowanceQuery<TData_5 = _0.AllowanceResponse>({ client, args, options }: _2.StardexTokenAllowanceQuery<TData_5>): import("@tanstack/react-query").UseQueryResult<TData_5, Error>;
        useStardexTokenMinterQuery<TData_6 = _0.MinterResponse>({ client, options }: _2.StardexTokenMinterQuery<TData_6>): import("@tanstack/react-query").UseQueryResult<TData_6, Error>;
        useStardexTokenTokenInfoQuery<TData_7 = _0.TokenInfoResponse>({ client, options }: _2.StardexTokenTokenInfoQuery<TData_7>): import("@tanstack/react-query").UseQueryResult<TData_7, Error>;
        useStardexTokenBalanceQuery<TData_8 = _0.BalanceResponse>({ client, args, options }: _2.StardexTokenBalanceQuery<TData_8>): import("@tanstack/react-query").UseQueryResult<TData_8, Error>;
        useStardexTokenUploadLogoMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenUploadLogoMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenUploadLogoMutation, unknown>;
        useStardexTokenUpdateMarketingMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenUpdateMarketingMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenUpdateMarketingMutation, unknown>;
        useStardexTokenUpdateMinterMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenUpdateMinterMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenUpdateMinterMutation, unknown>;
        useStardexTokenMintMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenMintMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenMintMutation, unknown>;
        useStardexTokenBurnFromMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenBurnFromMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenBurnFromMutation, unknown>;
        useStardexTokenSendFromMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenSendFromMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenSendFromMutation, unknown>;
        useStardexTokenTransferFromMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenTransferFromMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenTransferFromMutation, unknown>;
        useStardexTokenDecreaseAllowanceMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenDecreaseAllowanceMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenDecreaseAllowanceMutation, unknown>;
        useStardexTokenIncreaseAllowanceMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenIncreaseAllowanceMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenIncreaseAllowanceMutation, unknown>;
        useStardexTokenSendMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenSendMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenSendMutation, unknown>;
        useStardexTokenBurnMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenBurnMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenBurnMutation, unknown>;
        useStardexTokenTransferMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenTransferMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _2.StardexTokenTransferMutation, unknown>;
        stardexTokenQueryKeys: {
            contract: readonly [{
                readonly contract: "stardexToken";
            }];
            address: (contractAddress: string | undefined) => readonly [{
                readonly address: string | undefined;
                readonly contract: "stardexToken";
            }];
            balance: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "balance";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexToken";
            }];
            tokenInfo: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "token_info";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexToken";
            }];
            minter: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "minter";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexToken";
            }];
            allowance: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "allowance";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexToken";
            }];
            allAllowances: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "all_allowances";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexToken";
            }];
            allSpenderAllowances: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "all_spender_allowances";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexToken";
            }];
            allAccounts: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "all_accounts";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexToken";
            }];
            marketingInfo: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "marketing_info";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexToken";
            }];
            downloadLogo: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "download_logo";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexToken";
            }];
        };
        stardexTokenQueries: {
            balance: <TData_9 = _0.BalanceResponse>({ client, args, options }: _2.StardexTokenBalanceQuery<TData_9>) => import("@tanstack/react-query").UseQueryOptions<_0.BalanceResponse, Error, TData_9, import("@tanstack/query-core").QueryKey>;
            tokenInfo: <TData_10 = _0.TokenInfoResponse>({ client, options }: _2.StardexTokenTokenInfoQuery<TData_10>) => import("@tanstack/react-query").UseQueryOptions<_0.TokenInfoResponse, Error, TData_10, import("@tanstack/query-core").QueryKey>;
            minter: <TData_11 = _0.MinterResponse>({ client, options }: _2.StardexTokenMinterQuery<TData_11>) => import("@tanstack/react-query").UseQueryOptions<_0.MinterResponse, Error, TData_11, import("@tanstack/query-core").QueryKey>;
            allowance: <TData_12 = _0.AllowanceResponse>({ client, args, options }: _2.StardexTokenAllowanceQuery<TData_12>) => import("@tanstack/react-query").UseQueryOptions<_0.AllowanceResponse, Error, TData_12, import("@tanstack/query-core").QueryKey>;
            allAllowances: <TData_13 = _0.AllAllowancesResponse>({ client, args, options }: _2.StardexTokenAllAllowancesQuery<TData_13>) => import("@tanstack/react-query").UseQueryOptions<_0.AllAllowancesResponse, Error, TData_13, import("@tanstack/query-core").QueryKey>;
            allSpenderAllowances: <TData_14 = _0.AllSpenderAllowancesResponse>({ client, args, options }: _2.StardexTokenAllSpenderAllowancesQuery<TData_14>) => import("@tanstack/react-query").UseQueryOptions<_0.AllSpenderAllowancesResponse, Error, TData_14, import("@tanstack/query-core").QueryKey>;
            allAccounts: <TData_15 = _0.AllAccountsResponse>({ client, args, options }: _2.StardexTokenAllAccountsQuery<TData_15>) => import("@tanstack/react-query").UseQueryOptions<_0.AllAccountsResponse, Error, TData_15, import("@tanstack/query-core").QueryKey>;
            marketingInfo: <TData_16 = _0.MarketingInfoResponse>({ client, options }: _2.StardexTokenMarketingInfoQuery<TData_16>) => import("@tanstack/react-query").UseQueryOptions<_0.MarketingInfoResponse, Error, TData_16, import("@tanstack/query-core").QueryKey>;
            downloadLogo: <TData_17 = _0.DownloadLogoResponse>({ client, options }: _2.StardexTokenDownloadLogoQuery<TData_17>) => import("@tanstack/react-query").UseQueryOptions<_0.DownloadLogoResponse, Error, TData_17, import("@tanstack/query-core").QueryKey>;
        };
        StardexTokenQueryClient: typeof _1.StardexTokenQueryClient;
        StardexTokenClient: typeof _1.StardexTokenClient;
    };
    const StardexCoinRegistry: {
        StardexCoinRegistry: typeof _7.StardexCoinRegistry;
        useStardexCoinRegistryNativeTokensQuery<TData = _4.ArrayOfCoinResponse>({ client, args, options }: _6.StardexCoinRegistryNativeTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useStardexCoinRegistryNativeTokenQuery<TData_1 = _4.CoinResponse>({ client, args, options }: _6.StardexCoinRegistryNativeTokenQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
        useStardexCoinRegistryConfigQuery<TData_2 = _4.Config>({ client, options }: _6.StardexCoinRegistryConfigQuery<TData_2>): import("@tanstack/react-query").UseQueryResult<TData_2, Error>;
        useStardexCoinRegistryClaimOwnershipMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _6.StardexCoinRegistryClaimOwnershipMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _6.StardexCoinRegistryClaimOwnershipMutation, unknown>;
        useStardexCoinRegistryDropOwnershipProposalMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _6.StardexCoinRegistryDropOwnershipProposalMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _6.StardexCoinRegistryDropOwnershipProposalMutation, unknown>;
        useStardexCoinRegistryProposeNewOwnerMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _6.StardexCoinRegistryProposeNewOwnerMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _6.StardexCoinRegistryProposeNewOwnerMutation, unknown>;
        useStardexCoinRegistryRemoveMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _6.StardexCoinRegistryRemoveMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _6.StardexCoinRegistryRemoveMutation, unknown>;
        useStardexCoinRegistryAddMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _6.StardexCoinRegistryAddMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _6.StardexCoinRegistryAddMutation, unknown>;
        stardexCoinRegistryQueryKeys: {
            contract: readonly [{
                readonly contract: "stardexCoinRegistry";
            }];
            address: (contractAddress: string | undefined) => readonly [{
                readonly address: string | undefined;
                readonly contract: "stardexCoinRegistry";
            }];
            config: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "config";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexCoinRegistry";
            }];
            nativeToken: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "native_token";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexCoinRegistry";
            }];
            nativeTokens: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "native_tokens";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexCoinRegistry";
            }];
        };
        stardexCoinRegistryQueries: {
            config: <TData_3 = _4.Config>({ client, options }: _6.StardexCoinRegistryConfigQuery<TData_3>) => import("@tanstack/react-query").UseQueryOptions<_4.Config, Error, TData_3, import("@tanstack/query-core").QueryKey>;
            nativeToken: <TData_4 = _4.CoinResponse>({ client, args, options }: _6.StardexCoinRegistryNativeTokenQuery<TData_4>) => import("@tanstack/react-query").UseQueryOptions<_4.CoinResponse, Error, TData_4, import("@tanstack/query-core").QueryKey>;
            nativeTokens: <TData_5 = _4.ArrayOfCoinResponse>({ client, args, options }: _6.StardexCoinRegistryNativeTokensQuery<TData_5>) => import("@tanstack/react-query").UseQueryOptions<_4.ArrayOfCoinResponse, Error, TData_5, import("@tanstack/query-core").QueryKey>;
        };
        StardexCoinRegistryQueryClient: typeof _5.StardexCoinRegistryQueryClient;
        StardexCoinRegistryClient: typeof _5.StardexCoinRegistryClient;
    };
    const StardexFactory: {
        StardexFactory: typeof _11.StardexFactory;
        useStardexFactoryTrackerConfigQuery<TData = _8.TrackerConfig>({ client, options }: _10.StardexFactoryTrackerConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useStardexFactoryBlacklistedPairTypesQuery<TData_1 = _8.ArrayOfPairType>({ client, options }: _10.StardexFactoryBlacklistedPairTypesQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
        useStardexFactoryFeeInfoQuery<TData_2 = _8.FeeInfoResponse>({ client, args, options }: _10.StardexFactoryFeeInfoQuery<TData_2>): import("@tanstack/react-query").UseQueryResult<TData_2, Error>;
        useStardexFactoryPairsQuery<TData_3 = _8.PairsResponse>({ client, args, options }: _10.StardexFactoryPairsQuery<TData_3>): import("@tanstack/react-query").UseQueryResult<TData_3, Error>;
        useStardexFactoryPairQuery<TData_4 = _8.PairInfo>({ client, args, options }: _10.StardexFactoryPairQuery<TData_4>): import("@tanstack/react-query").UseQueryResult<TData_4, Error>;
        useStardexFactoryConfigQuery<TData_5 = _8.ConfigResponse>({ client, options }: _10.StardexFactoryConfigQuery<TData_5>): import("@tanstack/react-query").UseQueryResult<TData_5, Error>;
        useStardexFactoryClaimOwnershipMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryClaimOwnershipMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryClaimOwnershipMutation, unknown>;
        useStardexFactoryDropOwnershipProposalMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryDropOwnershipProposalMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryDropOwnershipProposalMutation, unknown>;
        useStardexFactoryProposeNewOwnerMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryProposeNewOwnerMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryProposeNewOwnerMutation, unknown>;
        useStardexFactoryDeregisterMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryDeregisterMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryDeregisterMutation, unknown>;
        useStardexFactoryCreatePairMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryCreatePairMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryCreatePairMutation, unknown>;
        useStardexFactoryUpdatePairConfigMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryUpdatePairConfigMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryUpdatePairConfigMutation, unknown>;
        useStardexFactoryUpdateTrackerConfigMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryUpdateTrackerConfigMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryUpdateTrackerConfigMutation, unknown>;
        useStardexFactoryUpdateConfigMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryUpdateConfigMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _10.StardexFactoryUpdateConfigMutation, unknown>;
        stardexFactoryQueryKeys: {
            contract: readonly [{
                readonly contract: "stardexFactory";
            }];
            address: (contractAddress: string | undefined) => readonly [{
                readonly address: string | undefined;
                readonly contract: "stardexFactory";
            }];
            config: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "config";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexFactory";
            }];
            pair: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "pair";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexFactory";
            }];
            pairs: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "pairs";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexFactory";
            }];
            feeInfo: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "fee_info";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexFactory";
            }];
            blacklistedPairTypes: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "blacklisted_pair_types";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexFactory";
            }];
            trackerConfig: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "tracker_config";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexFactory";
            }];
        };
        stardexFactoryQueries: {
            config: <TData_6 = _8.ConfigResponse>({ client, options }: _10.StardexFactoryConfigQuery<TData_6>) => import("@tanstack/react-query").UseQueryOptions<_8.ConfigResponse, Error, TData_6, import("@tanstack/query-core").QueryKey>;
            pair: <TData_7 = _8.PairInfo>({ client, args, options }: _10.StardexFactoryPairQuery<TData_7>) => import("@tanstack/react-query").UseQueryOptions<_8.PairInfo, Error, TData_7, import("@tanstack/query-core").QueryKey>;
            pairs: <TData_8 = _8.PairsResponse>({ client, args, options }: _10.StardexFactoryPairsQuery<TData_8>) => import("@tanstack/react-query").UseQueryOptions<_8.PairsResponse, Error, TData_8, import("@tanstack/query-core").QueryKey>;
            feeInfo: <TData_9 = _8.FeeInfoResponse>({ client, args, options }: _10.StardexFactoryFeeInfoQuery<TData_9>) => import("@tanstack/react-query").UseQueryOptions<_8.FeeInfoResponse, Error, TData_9, import("@tanstack/query-core").QueryKey>;
            blacklistedPairTypes: <TData_10 = _8.ArrayOfPairType>({ client, options }: _10.StardexFactoryBlacklistedPairTypesQuery<TData_10>) => import("@tanstack/react-query").UseQueryOptions<_8.ArrayOfPairType, Error, TData_10, import("@tanstack/query-core").QueryKey>;
            trackerConfig: <TData_11 = _8.TrackerConfig>({ client, options }: _10.StardexFactoryTrackerConfigQuery<TData_11>) => import("@tanstack/react-query").UseQueryOptions<_8.TrackerConfig, Error, TData_11, import("@tanstack/query-core").QueryKey>;
        };
        StardexFactoryQueryClient: typeof _9.StardexFactoryQueryClient;
        StardexFactoryClient: typeof _9.StardexFactoryClient;
    };
    const StardexPair: {
        StardexPair: typeof _15.StardexPair;
        useStardexPairSimulateProvideQuery<TData = string>({ client, args, options }: _14.StardexPairSimulateProvideQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useStardexPairSimulateWithdrawQuery<TData_1 = _12.ArrayOfAsset>({ client, args, options }: _14.StardexPairSimulateWithdrawQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
        useStardexPairObserveQuery<TData_2 = _12.OracleObservation>({ client, args, options }: _14.StardexPairObserveQuery<TData_2>): import("@tanstack/react-query").UseQueryResult<TData_2, Error>;
        useStardexPairAssetBalanceAtQuery<TData_3 = _12.NullableUint128>({ client, args, options }: _14.StardexPairAssetBalanceAtQuery<TData_3>): import("@tanstack/react-query").UseQueryResult<TData_3, Error>;
        useStardexPairQueryComputeDQuery<TData_4 = string>({ client, options }: _14.StardexPairQueryComputeDQuery<TData_4>): import("@tanstack/react-query").UseQueryResult<TData_4, Error>;
        useStardexPairCumulativePricesQuery<TData_5 = _12.CumulativePricesResponse>({ client, options }: _14.StardexPairCumulativePricesQuery<TData_5>): import("@tanstack/react-query").UseQueryResult<TData_5, Error>;
        useStardexPairReverseSimulationQuery<TData_6 = _12.ReverseSimulationResponse>({ client, args, options }: _14.StardexPairReverseSimulationQuery<TData_6>): import("@tanstack/react-query").UseQueryResult<TData_6, Error>;
        useStardexPairSimulationQuery<TData_7 = _12.SimulationResponse>({ client, args, options }: _14.StardexPairSimulationQuery<TData_7>): import("@tanstack/react-query").UseQueryResult<TData_7, Error>;
        useStardexPairShareQuery<TData_8 = _12.ArrayOfAsset>({ client, args, options }: _14.StardexPairShareQuery<TData_8>): import("@tanstack/react-query").UseQueryResult<TData_8, Error>;
        useStardexPairConfigQuery<TData_9 = _12.ConfigResponse>({ client, options }: _14.StardexPairConfigQuery<TData_9>): import("@tanstack/react-query").UseQueryResult<TData_9, Error>;
        useStardexPairPoolQuery<TData_10 = _12.PoolResponse>({ client, options }: _14.StardexPairPoolQuery<TData_10>): import("@tanstack/react-query").UseQueryResult<TData_10, Error>;
        useStardexPairPairQuery<TData_11 = _12.PairInfo>({ client, options }: _14.StardexPairPairQuery<TData_11>): import("@tanstack/react-query").UseQueryResult<TData_11, Error>;
        useStardexPairClaimOwnershipMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairClaimOwnershipMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairClaimOwnershipMutation, unknown>;
        useStardexPairDropOwnershipProposalMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairDropOwnershipProposalMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairDropOwnershipProposalMutation, unknown>;
        useStardexPairProposeNewOwnerMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairProposeNewOwnerMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairProposeNewOwnerMutation, unknown>;
        useStardexPairUpdateConfigMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairUpdateConfigMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairUpdateConfigMutation, unknown>;
        useStardexPairSwapMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairSwapMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairSwapMutation, unknown>;
        useStardexPairWithdrawLiquidityMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairWithdrawLiquidityMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairWithdrawLiquidityMutation, unknown>;
        useStardexPairProvideLiquidityMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairProvideLiquidityMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairProvideLiquidityMutation, unknown>;
        useStardexPairReceiveMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairReceiveMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _14.StardexPairReceiveMutation, unknown>;
        stardexPairQueryKeys: {
            contract: readonly [{
                readonly contract: "stardexPair";
            }];
            address: (contractAddress: string | undefined) => readonly [{
                readonly address: string | undefined;
                readonly contract: "stardexPair";
            }];
            pair: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "pair";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPair";
            }];
            pool: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "pool";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPair";
            }];
            config: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "config";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPair";
            }];
            share: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "share";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPair";
            }];
            simulation: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "simulation";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPair";
            }];
            reverseSimulation: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "reverse_simulation";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPair";
            }];
            cumulativePrices: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "cumulative_prices";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPair";
            }];
            queryComputeD: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "query_compute_d";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPair";
            }];
            assetBalanceAt: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "asset_balance_at";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPair";
            }];
            observe: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "observe";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPair";
            }];
            simulateWithdraw: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "simulate_withdraw";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPair";
            }];
            simulateProvide: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "simulate_provide";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPair";
            }];
        };
        stardexPairQueries: {
            pair: <TData_12 = _12.PairInfo>({ client, options }: _14.StardexPairPairQuery<TData_12>) => import("@tanstack/react-query").UseQueryOptions<_12.PairInfo, Error, TData_12, import("@tanstack/query-core").QueryKey>;
            pool: <TData_13 = _12.PoolResponse>({ client, options }: _14.StardexPairPoolQuery<TData_13>) => import("@tanstack/react-query").UseQueryOptions<_12.PoolResponse, Error, TData_13, import("@tanstack/query-core").QueryKey>;
            config: <TData_14 = _12.ConfigResponse>({ client, options }: _14.StardexPairConfigQuery<TData_14>) => import("@tanstack/react-query").UseQueryOptions<_12.ConfigResponse, Error, TData_14, import("@tanstack/query-core").QueryKey>;
            share: <TData_15 = _12.ArrayOfAsset>({ client, args, options }: _14.StardexPairShareQuery<TData_15>) => import("@tanstack/react-query").UseQueryOptions<_12.ArrayOfAsset, Error, TData_15, import("@tanstack/query-core").QueryKey>;
            simulation: <TData_16 = _12.SimulationResponse>({ client, args, options }: _14.StardexPairSimulationQuery<TData_16>) => import("@tanstack/react-query").UseQueryOptions<_12.SimulationResponse, Error, TData_16, import("@tanstack/query-core").QueryKey>;
            reverseSimulation: <TData_17 = _12.ReverseSimulationResponse>({ client, args, options }: _14.StardexPairReverseSimulationQuery<TData_17>) => import("@tanstack/react-query").UseQueryOptions<_12.ReverseSimulationResponse, Error, TData_17, import("@tanstack/query-core").QueryKey>;
            cumulativePrices: <TData_18 = _12.CumulativePricesResponse>({ client, options }: _14.StardexPairCumulativePricesQuery<TData_18>) => import("@tanstack/react-query").UseQueryOptions<_12.CumulativePricesResponse, Error, TData_18, import("@tanstack/query-core").QueryKey>;
            queryComputeD: <TData_19 = string>({ client, options }: _14.StardexPairQueryComputeDQuery<TData_19>) => import("@tanstack/react-query").UseQueryOptions<string, Error, TData_19, import("@tanstack/query-core").QueryKey>;
            assetBalanceAt: <TData_20 = _12.NullableUint128>({ client, args, options }: _14.StardexPairAssetBalanceAtQuery<TData_20>) => import("@tanstack/react-query").UseQueryOptions<_12.NullableUint128, Error, TData_20, import("@tanstack/query-core").QueryKey>;
            observe: <TData_21 = _12.OracleObservation>({ client, args, options }: _14.StardexPairObserveQuery<TData_21>) => import("@tanstack/react-query").UseQueryOptions<_12.OracleObservation, Error, TData_21, import("@tanstack/query-core").QueryKey>;
            simulateWithdraw: <TData_22 = _12.ArrayOfAsset>({ client, args, options }: _14.StardexPairSimulateWithdrawQuery<TData_22>) => import("@tanstack/react-query").UseQueryOptions<_12.ArrayOfAsset, Error, TData_22, import("@tanstack/query-core").QueryKey>;
            simulateProvide: <TData_23 = string>({ client, args, options }: _14.StardexPairSimulateProvideQuery<TData_23>) => import("@tanstack/react-query").UseQueryOptions<string, Error, TData_23, import("@tanstack/query-core").QueryKey>;
        };
        StardexPairQueryClient: typeof _13.StardexPairQueryClient;
        StardexPairClient: typeof _13.StardexPairClient;
    };
    const StardexPairStable: {
        StardexPairStable: typeof _19.StardexPairStable;
        useStardexPairStableSimulateProvideQuery<TData = string>({ client, args, options }: _18.StardexPairStableSimulateProvideQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useStardexPairStableSimulateWithdrawQuery<TData_1 = _16.ArrayOfAsset>({ client, args, options }: _18.StardexPairStableSimulateWithdrawQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
        useStardexPairStableObserveQuery<TData_2 = _16.OracleObservation>({ client, args, options }: _18.StardexPairStableObserveQuery<TData_2>): import("@tanstack/react-query").UseQueryResult<TData_2, Error>;
        useStardexPairStableAssetBalanceAtQuery<TData_3 = _16.NullableUint128>({ client, args, options }: _18.StardexPairStableAssetBalanceAtQuery<TData_3>): import("@tanstack/react-query").UseQueryResult<TData_3, Error>;
        useStardexPairStableQueryComputeDQuery<TData_4 = string>({ client, options }: _18.StardexPairStableQueryComputeDQuery<TData_4>): import("@tanstack/react-query").UseQueryResult<TData_4, Error>;
        useStardexPairStableCumulativePricesQuery<TData_5 = _16.CumulativePricesResponse>({ client, options }: _18.StardexPairStableCumulativePricesQuery<TData_5>): import("@tanstack/react-query").UseQueryResult<TData_5, Error>;
        useStardexPairStableReverseSimulationQuery<TData_6 = _16.ReverseSimulationResponse>({ client, args, options }: _18.StardexPairStableReverseSimulationQuery<TData_6>): import("@tanstack/react-query").UseQueryResult<TData_6, Error>;
        useStardexPairStableSimulationQuery<TData_7 = _16.SimulationResponse>({ client, args, options }: _18.StardexPairStableSimulationQuery<TData_7>): import("@tanstack/react-query").UseQueryResult<TData_7, Error>;
        useStardexPairStableShareQuery<TData_8 = _16.ArrayOfAsset>({ client, args, options }: _18.StardexPairStableShareQuery<TData_8>): import("@tanstack/react-query").UseQueryResult<TData_8, Error>;
        useStardexPairStableConfigQuery<TData_9 = _16.ConfigResponse>({ client, options }: _18.StardexPairStableConfigQuery<TData_9>): import("@tanstack/react-query").UseQueryResult<TData_9, Error>;
        useStardexPairStablePoolQuery<TData_10 = _16.PoolResponse>({ client, options }: _18.StardexPairStablePoolQuery<TData_10>): import("@tanstack/react-query").UseQueryResult<TData_10, Error>;
        useStardexPairStablePairQuery<TData_11 = _16.PairInfo>({ client, options }: _18.StardexPairStablePairQuery<TData_11>): import("@tanstack/react-query").UseQueryResult<TData_11, Error>;
        useStardexPairStableClaimOwnershipMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableClaimOwnershipMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableClaimOwnershipMutation, unknown>;
        useStardexPairStableDropOwnershipProposalMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableDropOwnershipProposalMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableDropOwnershipProposalMutation, unknown>;
        useStardexPairStableProposeNewOwnerMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableProposeNewOwnerMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableProposeNewOwnerMutation, unknown>;
        useStardexPairStableUpdateConfigMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableUpdateConfigMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableUpdateConfigMutation, unknown>;
        useStardexPairStableSwapMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableSwapMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableSwapMutation, unknown>;
        useStardexPairStableWithdrawLiquidityMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableWithdrawLiquidityMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableWithdrawLiquidityMutation, unknown>;
        useStardexPairStableProvideLiquidityMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableProvideLiquidityMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableProvideLiquidityMutation, unknown>;
        useStardexPairStableReceiveMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableReceiveMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.StardexPairStableReceiveMutation, unknown>;
        stardexPairStableQueryKeys: {
            contract: readonly [{
                readonly contract: "stardexPairStable";
            }];
            address: (contractAddress: string | undefined) => readonly [{
                readonly address: string | undefined;
                readonly contract: "stardexPairStable";
            }];
            pair: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "pair";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairStable";
            }];
            pool: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "pool";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairStable";
            }];
            config: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "config";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairStable";
            }];
            share: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "share";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairStable";
            }];
            simulation: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "simulation";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairStable";
            }];
            reverseSimulation: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "reverse_simulation";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairStable";
            }];
            cumulativePrices: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "cumulative_prices";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairStable";
            }];
            queryComputeD: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "query_compute_d";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairStable";
            }];
            assetBalanceAt: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "asset_balance_at";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairStable";
            }];
            observe: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "observe";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairStable";
            }];
            simulateWithdraw: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "simulate_withdraw";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairStable";
            }];
            simulateProvide: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "simulate_provide";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairStable";
            }];
        };
        stardexPairStableQueries: {
            pair: <TData_12 = _16.PairInfo>({ client, options }: _18.StardexPairStablePairQuery<TData_12>) => import("@tanstack/react-query").UseQueryOptions<_16.PairInfo, Error, TData_12, import("@tanstack/query-core").QueryKey>;
            pool: <TData_13 = _16.PoolResponse>({ client, options }: _18.StardexPairStablePoolQuery<TData_13>) => import("@tanstack/react-query").UseQueryOptions<_16.PoolResponse, Error, TData_13, import("@tanstack/query-core").QueryKey>;
            config: <TData_14 = _16.ConfigResponse>({ client, options }: _18.StardexPairStableConfigQuery<TData_14>) => import("@tanstack/react-query").UseQueryOptions<_16.ConfigResponse, Error, TData_14, import("@tanstack/query-core").QueryKey>;
            share: <TData_15 = _16.ArrayOfAsset>({ client, args, options }: _18.StardexPairStableShareQuery<TData_15>) => import("@tanstack/react-query").UseQueryOptions<_16.ArrayOfAsset, Error, TData_15, import("@tanstack/query-core").QueryKey>;
            simulation: <TData_16 = _16.SimulationResponse>({ client, args, options }: _18.StardexPairStableSimulationQuery<TData_16>) => import("@tanstack/react-query").UseQueryOptions<_16.SimulationResponse, Error, TData_16, import("@tanstack/query-core").QueryKey>;
            reverseSimulation: <TData_17 = _16.ReverseSimulationResponse>({ client, args, options }: _18.StardexPairStableReverseSimulationQuery<TData_17>) => import("@tanstack/react-query").UseQueryOptions<_16.ReverseSimulationResponse, Error, TData_17, import("@tanstack/query-core").QueryKey>;
            cumulativePrices: <TData_18 = _16.CumulativePricesResponse>({ client, options }: _18.StardexPairStableCumulativePricesQuery<TData_18>) => import("@tanstack/react-query").UseQueryOptions<_16.CumulativePricesResponse, Error, TData_18, import("@tanstack/query-core").QueryKey>;
            queryComputeD: <TData_19 = string>({ client, options }: _18.StardexPairStableQueryComputeDQuery<TData_19>) => import("@tanstack/react-query").UseQueryOptions<string, Error, TData_19, import("@tanstack/query-core").QueryKey>;
            assetBalanceAt: <TData_20 = _16.NullableUint128>({ client, args, options }: _18.StardexPairStableAssetBalanceAtQuery<TData_20>) => import("@tanstack/react-query").UseQueryOptions<_16.NullableUint128, Error, TData_20, import("@tanstack/query-core").QueryKey>;
            observe: <TData_21 = _16.OracleObservation>({ client, args, options }: _18.StardexPairStableObserveQuery<TData_21>) => import("@tanstack/react-query").UseQueryOptions<_16.OracleObservation, Error, TData_21, import("@tanstack/query-core").QueryKey>;
            simulateWithdraw: <TData_22 = _16.ArrayOfAsset>({ client, args, options }: _18.StardexPairStableSimulateWithdrawQuery<TData_22>) => import("@tanstack/react-query").UseQueryOptions<_16.ArrayOfAsset, Error, TData_22, import("@tanstack/query-core").QueryKey>;
            simulateProvide: <TData_23 = string>({ client, args, options }: _18.StardexPairStableSimulateProvideQuery<TData_23>) => import("@tanstack/react-query").UseQueryOptions<string, Error, TData_23, import("@tanstack/query-core").QueryKey>;
        };
        StardexPairStableQueryClient: typeof _17.StardexPairStableQueryClient;
        StardexPairStableClient: typeof _17.StardexPairStableClient;
    };
    const StardexPairConcentrated: {
        StardexPairConcentrated: typeof _23.StardexPairConcentrated;
        useStardexPairConcentratedSimulateWithdrawQuery<TData = _20.ArrayOfAsset>({ client, args, options }: _22.StardexPairConcentratedSimulateWithdrawQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useStardexPairConcentratedSimulateProvideQuery<TData_1 = string>({ client, args, options }: _22.StardexPairConcentratedSimulateProvideQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
        useStardexPairConcentratedObserveQuery<TData_2 = _20.OracleObservation>({ client, args, options }: _22.StardexPairConcentratedObserveQuery<TData_2>): import("@tanstack/react-query").UseQueryResult<TData_2, Error>;
        useStardexPairConcentratedAssetBalanceAtQuery<TData_3 = _20.NullableUint128>({ client, args, options }: _22.StardexPairConcentratedAssetBalanceAtQuery<TData_3>): import("@tanstack/react-query").UseQueryResult<TData_3, Error>;
        useStardexPairConcentratedLpPriceQuery<TData_4 = string>({ client, options }: _22.StardexPairConcentratedLpPriceQuery<TData_4>): import("@tanstack/react-query").UseQueryResult<TData_4, Error>;
        useStardexPairConcentratedComputeDQuery<TData_5 = string>({ client, options }: _22.StardexPairConcentratedComputeDQuery<TData_5>): import("@tanstack/react-query").UseQueryResult<TData_5, Error>;
        useStardexPairConcentratedCumulativePricesQuery<TData_6 = _20.CumulativePricesResponse>({ client, options }: _22.StardexPairConcentratedCumulativePricesQuery<TData_6>): import("@tanstack/react-query").UseQueryResult<TData_6, Error>;
        useStardexPairConcentratedReverseSimulationQuery<TData_7 = _20.ReverseSimulationResponse>({ client, args, options }: _22.StardexPairConcentratedReverseSimulationQuery<TData_7>): import("@tanstack/react-query").UseQueryResult<TData_7, Error>;
        useStardexPairConcentratedSimulationQuery<TData_8 = _20.SimulationResponse>({ client, args, options }: _22.StardexPairConcentratedSimulationQuery<TData_8>): import("@tanstack/react-query").UseQueryResult<TData_8, Error>;
        useStardexPairConcentratedShareQuery<TData_9 = _20.ArrayOfAsset>({ client, args, options }: _22.StardexPairConcentratedShareQuery<TData_9>): import("@tanstack/react-query").UseQueryResult<TData_9, Error>;
        useStardexPairConcentratedConfigQuery<TData_10 = _20.ConfigResponse>({ client, options }: _22.StardexPairConcentratedConfigQuery<TData_10>): import("@tanstack/react-query").UseQueryResult<TData_10, Error>;
        useStardexPairConcentratedPoolQuery<TData_11 = _20.PoolResponse>({ client, options }: _22.StardexPairConcentratedPoolQuery<TData_11>): import("@tanstack/react-query").UseQueryResult<TData_11, Error>;
        useStardexPairConcentratedPairQuery<TData_12 = _20.PairInfo>({ client, options }: _22.StardexPairConcentratedPairQuery<TData_12>): import("@tanstack/react-query").UseQueryResult<TData_12, Error>;
        useStardexPairConcentratedClaimOwnershipMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedClaimOwnershipMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedClaimOwnershipMutation, unknown>;
        useStardexPairConcentratedDropOwnershipProposalMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedDropOwnershipProposalMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedDropOwnershipProposalMutation, unknown>;
        useStardexPairConcentratedProposeNewOwnerMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedProposeNewOwnerMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedProposeNewOwnerMutation, unknown>;
        useStardexPairConcentratedUpdateConfigMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedUpdateConfigMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedUpdateConfigMutation, unknown>;
        useStardexPairConcentratedSwapMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedSwapMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedSwapMutation, unknown>;
        useStardexPairConcentratedWithdrawLiquidityMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedWithdrawLiquidityMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedWithdrawLiquidityMutation, unknown>;
        useStardexPairConcentratedProvideLiquidityMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedProvideLiquidityMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedProvideLiquidityMutation, unknown>;
        useStardexPairConcentratedReceiveMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedReceiveMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _22.StardexPairConcentratedReceiveMutation, unknown>;
        stardexPairConcentratedQueryKeys: {
            contract: readonly [{
                readonly contract: "stardexPairConcentrated";
            }];
            address: (contractAddress: string | undefined) => readonly [{
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
            pair: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "pair";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
            pool: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "pool";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
            config: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "config";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
            share: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "share";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
            simulation: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "simulation";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
            reverseSimulation: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "reverse_simulation";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
            cumulativePrices: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "cumulative_prices";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
            computeD: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "compute_d";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
            lpPrice: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "lp_price";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
            assetBalanceAt: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "asset_balance_at";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
            observe: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "observe";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
            simulateProvide: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "simulate_provide";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
            simulateWithdraw: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "simulate_withdraw";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexPairConcentrated";
            }];
        };
        stardexPairConcentratedQueries: {
            pair: <TData_13 = _20.PairInfo>({ client, options }: _22.StardexPairConcentratedPairQuery<TData_13>) => import("@tanstack/react-query").UseQueryOptions<_20.PairInfo, Error, TData_13, import("@tanstack/query-core").QueryKey>;
            pool: <TData_14 = _20.PoolResponse>({ client, options }: _22.StardexPairConcentratedPoolQuery<TData_14>) => import("@tanstack/react-query").UseQueryOptions<_20.PoolResponse, Error, TData_14, import("@tanstack/query-core").QueryKey>;
            config: <TData_15 = _20.ConfigResponse>({ client, options }: _22.StardexPairConcentratedConfigQuery<TData_15>) => import("@tanstack/react-query").UseQueryOptions<_20.ConfigResponse, Error, TData_15, import("@tanstack/query-core").QueryKey>;
            share: <TData_16 = _20.ArrayOfAsset>({ client, args, options }: _22.StardexPairConcentratedShareQuery<TData_16>) => import("@tanstack/react-query").UseQueryOptions<_20.ArrayOfAsset, Error, TData_16, import("@tanstack/query-core").QueryKey>;
            simulation: <TData_17 = _20.SimulationResponse>({ client, args, options }: _22.StardexPairConcentratedSimulationQuery<TData_17>) => import("@tanstack/react-query").UseQueryOptions<_20.SimulationResponse, Error, TData_17, import("@tanstack/query-core").QueryKey>;
            reverseSimulation: <TData_18 = _20.ReverseSimulationResponse>({ client, args, options }: _22.StardexPairConcentratedReverseSimulationQuery<TData_18>) => import("@tanstack/react-query").UseQueryOptions<_20.ReverseSimulationResponse, Error, TData_18, import("@tanstack/query-core").QueryKey>;
            cumulativePrices: <TData_19 = _20.CumulativePricesResponse>({ client, options }: _22.StardexPairConcentratedCumulativePricesQuery<TData_19>) => import("@tanstack/react-query").UseQueryOptions<_20.CumulativePricesResponse, Error, TData_19, import("@tanstack/query-core").QueryKey>;
            computeD: <TData_20 = string>({ client, options }: _22.StardexPairConcentratedComputeDQuery<TData_20>) => import("@tanstack/react-query").UseQueryOptions<string, Error, TData_20, import("@tanstack/query-core").QueryKey>;
            lpPrice: <TData_21 = string>({ client, options }: _22.StardexPairConcentratedLpPriceQuery<TData_21>) => import("@tanstack/react-query").UseQueryOptions<string, Error, TData_21, import("@tanstack/query-core").QueryKey>;
            assetBalanceAt: <TData_22 = _20.NullableUint128>({ client, args, options }: _22.StardexPairConcentratedAssetBalanceAtQuery<TData_22>) => import("@tanstack/react-query").UseQueryOptions<_20.NullableUint128, Error, TData_22, import("@tanstack/query-core").QueryKey>;
            observe: <TData_23 = _20.OracleObservation>({ client, args, options }: _22.StardexPairConcentratedObserveQuery<TData_23>) => import("@tanstack/react-query").UseQueryOptions<_20.OracleObservation, Error, TData_23, import("@tanstack/query-core").QueryKey>;
            simulateProvide: <TData_24 = string>({ client, args, options }: _22.StardexPairConcentratedSimulateProvideQuery<TData_24>) => import("@tanstack/react-query").UseQueryOptions<string, Error, TData_24, import("@tanstack/query-core").QueryKey>;
            simulateWithdraw: <TData_25 = _20.ArrayOfAsset>({ client, args, options }: _22.StardexPairConcentratedSimulateWithdrawQuery<TData_25>) => import("@tanstack/react-query").UseQueryOptions<_20.ArrayOfAsset, Error, TData_25, import("@tanstack/query-core").QueryKey>;
        };
        StardexPairConcentratedQueryClient: typeof _21.StardexPairConcentratedQueryClient;
        StardexPairConcentratedClient: typeof _21.StardexPairConcentratedClient;
    };
    const StardexRouter: {
        StardexRouter: typeof _27.StardexRouter;
        useStardexRouterSimulateSwapOperationsQuery<TData = _24.SimulateSwapOperationsResponse>({ client, args, options }: _26.StardexRouterSimulateSwapOperationsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useStardexRouterConfigQuery<TData_1 = _24.ConfigResponse>({ client, options }: _26.StardexRouterConfigQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
        useStardexRouterExecuteSwapOperationMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _26.StardexRouterExecuteSwapOperationMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _26.StardexRouterExecuteSwapOperationMutation, unknown>;
        useStardexRouterExecuteSwapOperationsMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _26.StardexRouterExecuteSwapOperationsMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _26.StardexRouterExecuteSwapOperationsMutation, unknown>;
        useStardexRouterReceiveMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _26.StardexRouterReceiveMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _26.StardexRouterReceiveMutation, unknown>;
        stardexRouterQueryKeys: {
            contract: readonly [{
                readonly contract: "stardexRouter";
            }];
            address: (contractAddress: string | undefined) => readonly [{
                readonly address: string | undefined;
                readonly contract: "stardexRouter";
            }];
            config: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "config";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexRouter";
            }];
            simulateSwapOperations: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "simulate_swap_operations";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexRouter";
            }];
        };
        stardexRouterQueries: {
            config: <TData_2 = _24.ConfigResponse>({ client, options }: _26.StardexRouterConfigQuery<TData_2>) => import("@tanstack/react-query").UseQueryOptions<_24.ConfigResponse, Error, TData_2, import("@tanstack/query-core").QueryKey>;
            simulateSwapOperations: <TData_3 = _24.SimulateSwapOperationsResponse>({ client, args, options }: _26.StardexRouterSimulateSwapOperationsQuery<TData_3>) => import("@tanstack/react-query").UseQueryOptions<_24.SimulateSwapOperationsResponse, Error, TData_3, import("@tanstack/query-core").QueryKey>;
        };
        StardexRouterQueryClient: typeof _25.StardexRouterQueryClient;
        StardexRouterClient: typeof _25.StardexRouterClient;
    };
    const StardexStakeNative: {
        StardexStakeNative: typeof _31.StardexStakeNative;
        useStardexStakeNativeStakeBalanceAtHeightQuery<TData = string>({ client, args, options }: _30.StardexStakeNativeStakeBalanceAtHeightQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useStardexStakeNativeRewardAccountsQuery<TData_1 = _28.ArrayOfAddr>({ client, options }: _30.StardexStakeNativeRewardAccountsQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
        useStardexStakeNativeClaimRewardsMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeClaimRewardsMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeClaimRewardsMutation, unknown>;
        useStardexStakeNativeClaimMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeClaimMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeClaimMutation, unknown>;
        useStardexStakeNativeUnstakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeUnstakeMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeUnstakeMutation, unknown>;
        useStardexStakeNativeStakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeStakeMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeStakeMutation, unknown>;
        useStardexStakeNativeRemoveRewardAccountMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeRemoveRewardAccountMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeRemoveRewardAccountMutation, unknown>;
        useStardexStakeNativeCreateRewardAccountMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeCreateRewardAccountMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeCreateRewardAccountMutation, unknown>;
        useStardexStakeNativeUpdateConfigMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeUpdateConfigMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _30.StardexStakeNativeUpdateConfigMutation, unknown>;
        stardexStakeNativeQueryKeys: {
            contract: readonly [{
                readonly contract: "stardexStakeNative";
            }];
            address: (contractAddress: string | undefined) => readonly [{
                readonly address: string | undefined;
                readonly contract: "stardexStakeNative";
            }];
            rewardAccounts: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "reward_accounts";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexStakeNative";
            }];
            stakeBalanceAtHeight: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "stake_balance_at_height";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexStakeNative";
            }];
        };
        stardexStakeNativeQueries: {
            rewardAccounts: <TData_2 = _28.ArrayOfAddr>({ client, options }: _30.StardexStakeNativeRewardAccountsQuery<TData_2>) => import("@tanstack/react-query").UseQueryOptions<_28.ArrayOfAddr, Error, TData_2, import("@tanstack/query-core").QueryKey>;
            stakeBalanceAtHeight: <TData_3 = string>({ client, args, options }: _30.StardexStakeNativeStakeBalanceAtHeightQuery<TData_3>) => import("@tanstack/react-query").UseQueryOptions<string, Error, TData_3, import("@tanstack/query-core").QueryKey>;
        };
        StardexStakeNativeQueryClient: typeof _29.StardexStakeNativeQueryClient;
        StardexStakeNativeClient: typeof _29.StardexStakeNativeClient;
    };
    const StardexStakeRewards: {
        StardexStakeRewards: typeof _35.StardexStakeRewards;
        useStardexStakeRewardsUserRewardQuery<TData = _32.NullableUserReward>({ client, args, options }: _34.StardexStakeRewardsUserRewardQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useStardexStakeRewardsClaimRewardsMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _34.StardexStakeRewardsClaimRewardsMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _34.StardexStakeRewardsClaimRewardsMutation, unknown>;
        useStardexStakeRewardsStakeChangeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _34.StardexStakeRewardsStakeChangeMutation, unknown>, "mutationFn"> | undefined): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _34.StardexStakeRewardsStakeChangeMutation, unknown>;
        stardexStakeRewardsQueryKeys: {
            contract: readonly [{
                readonly contract: "stardexStakeRewards";
            }];
            address: (contractAddress: string | undefined) => readonly [{
                readonly address: string | undefined;
                readonly contract: "stardexStakeRewards";
            }];
            userReward: (contractAddress: string | undefined, args?: Record<string, unknown> | undefined) => readonly [{
                readonly method: "user_reward";
                readonly args: Record<string, unknown> | undefined;
                readonly address: string | undefined;
                readonly contract: "stardexStakeRewards";
            }];
        };
        stardexStakeRewardsQueries: {
            userReward: <TData_1 = _32.NullableUserReward>({ client, args, options }: _34.StardexStakeRewardsUserRewardQuery<TData_1>) => import("@tanstack/react-query").UseQueryOptions<_32.NullableUserReward, Error, TData_1, import("@tanstack/query-core").QueryKey>;
        };
        StardexStakeRewardsQueryClient: typeof _33.StardexStakeRewardsQueryClient;
        StardexStakeRewardsClient: typeof _33.StardexStakeRewardsClient;
    };
    const undefined: {
        getProviders: (address?: string | undefined, cosmWasmClient?: import("@cosmjs/cosmwasm-stargate").CosmWasmClient | undefined, signingCosmWasmClient?: import("@cosmjs/cosmwasm-stargate").SigningCosmWasmClient | undefined) => {
            stardexToken: _3.StardexToken;
            stardexCoinRegistry: _7.StardexCoinRegistry;
            stardexFactory: _11.StardexFactory;
            stardexPair: _15.StardexPair;
            stardexPairStable: _19.StardexPairStable;
            stardexPairConcentrated: _23.StardexPairConcentrated;
            stardexRouter: _27.StardexRouter;
            stardexStakeNative: _31.StardexStakeNative;
            stardexStakeRewards: _35.StardexStakeRewards;
        };
    };
    const contractContextBase: {
        NO_SINGING_ERROR_MESSAGE: "signingCosmWasmClient not connected";
        NO_COSMWASW_CLIENT_ERROR_MESSAGE: "cosmWasmClient not connected";
        NO_ADDRESS_ERROR_MESSAGE: "address doesn't exist";
        NO_SIGNING_CLIENT_ERROR_MESSAGE: "Signing client is not generated. Please check ts-codegen config";
        NO_QUERY_CLIENT_ERROR_MESSAGE: "Query client is not generated. Please check ts-codegen config";
        NO_MESSAGE_COMPOSER_ERROR_MESSAGE: "Message composer client is not generated. Please check ts-codegen config";
        ContractBase: typeof _37.ContractBase;
    };
    const contractsContext: {
        ContractsProvider: ({ children, contractsConfig, }: {
            children: import("react").ReactNode;
            contractsConfig: _38.ContractsConfig;
        }) => import("react").JSX.Element;
        useContracts: () => _36.IContractsContext;
    };
}
