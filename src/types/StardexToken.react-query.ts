/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Uint128, Logo, EmbeddedLogo, Binary, InstantiateMsg, Cw20Coin, InstantiateMarketingInfo, MinterResponse, ExecuteMsg, Expiration, Timestamp, Uint64, QueryMsg, AllAccountsResponse, AllAllowancesResponse, AllowanceInfo, AllSpenderAllowancesResponse, SpenderAllowanceInfo, AllowanceResponse, BalanceResponse, DownloadLogoResponse, LogoInfo, Addr, MarketingInfoResponse, TokenInfoResponse } from "./StardexToken.types";
import { StardexTokenQueryClient, StardexTokenClient } from "./StardexToken.client";
export const stardexTokenQueryKeys = {
  contract: ([{
    contract: "stardexToken"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...stardexTokenQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  balance: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexTokenQueryKeys.address(contractAddress)[0],
    method: "balance",
    args
  }] as const),
  tokenInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexTokenQueryKeys.address(contractAddress)[0],
    method: "token_info",
    args
  }] as const),
  minter: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexTokenQueryKeys.address(contractAddress)[0],
    method: "minter",
    args
  }] as const),
  allowance: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexTokenQueryKeys.address(contractAddress)[0],
    method: "allowance",
    args
  }] as const),
  allAllowances: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexTokenQueryKeys.address(contractAddress)[0],
    method: "all_allowances",
    args
  }] as const),
  allSpenderAllowances: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexTokenQueryKeys.address(contractAddress)[0],
    method: "all_spender_allowances",
    args
  }] as const),
  allAccounts: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexTokenQueryKeys.address(contractAddress)[0],
    method: "all_accounts",
    args
  }] as const),
  marketingInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexTokenQueryKeys.address(contractAddress)[0],
    method: "marketing_info",
    args
  }] as const),
  downloadLogo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexTokenQueryKeys.address(contractAddress)[0],
    method: "download_logo",
    args
  }] as const)
};
export const stardexTokenQueries = {
  balance: <TData = BalanceResponse,>({
    client,
    args,
    options
  }: StardexTokenBalanceQuery<TData>): UseQueryOptions<BalanceResponse, Error, TData> => ({
    queryKey: stardexTokenQueryKeys.balance(client?.contractAddress, args),
    queryFn: () => client ? client.balance({
      address: args.address
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  tokenInfo: <TData = TokenInfoResponse,>({
    client,
    options
  }: StardexTokenTokenInfoQuery<TData>): UseQueryOptions<TokenInfoResponse, Error, TData> => ({
    queryKey: stardexTokenQueryKeys.tokenInfo(client?.contractAddress),
    queryFn: () => client ? client.tokenInfo() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  minter: <TData = MinterResponse,>({
    client,
    options
  }: StardexTokenMinterQuery<TData>): UseQueryOptions<MinterResponse, Error, TData> => ({
    queryKey: stardexTokenQueryKeys.minter(client?.contractAddress),
    queryFn: () => client ? client.minter() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allowance: <TData = AllowanceResponse,>({
    client,
    args,
    options
  }: StardexTokenAllowanceQuery<TData>): UseQueryOptions<AllowanceResponse, Error, TData> => ({
    queryKey: stardexTokenQueryKeys.allowance(client?.contractAddress, args),
    queryFn: () => client ? client.allowance({
      owner: args.owner,
      spender: args.spender
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allAllowances: <TData = AllAllowancesResponse,>({
    client,
    args,
    options
  }: StardexTokenAllAllowancesQuery<TData>): UseQueryOptions<AllAllowancesResponse, Error, TData> => ({
    queryKey: stardexTokenQueryKeys.allAllowances(client?.contractAddress, args),
    queryFn: () => client ? client.allAllowances({
      limit: args.limit,
      owner: args.owner,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allSpenderAllowances: <TData = AllSpenderAllowancesResponse,>({
    client,
    args,
    options
  }: StardexTokenAllSpenderAllowancesQuery<TData>): UseQueryOptions<AllSpenderAllowancesResponse, Error, TData> => ({
    queryKey: stardexTokenQueryKeys.allSpenderAllowances(client?.contractAddress, args),
    queryFn: () => client ? client.allSpenderAllowances({
      limit: args.limit,
      spender: args.spender,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allAccounts: <TData = AllAccountsResponse,>({
    client,
    args,
    options
  }: StardexTokenAllAccountsQuery<TData>): UseQueryOptions<AllAccountsResponse, Error, TData> => ({
    queryKey: stardexTokenQueryKeys.allAccounts(client?.contractAddress, args),
    queryFn: () => client ? client.allAccounts({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  marketingInfo: <TData = MarketingInfoResponse,>({
    client,
    options
  }: StardexTokenMarketingInfoQuery<TData>): UseQueryOptions<MarketingInfoResponse, Error, TData> => ({
    queryKey: stardexTokenQueryKeys.marketingInfo(client?.contractAddress),
    queryFn: () => client ? client.marketingInfo() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  downloadLogo: <TData = DownloadLogoResponse,>({
    client,
    options
  }: StardexTokenDownloadLogoQuery<TData>): UseQueryOptions<DownloadLogoResponse, Error, TData> => ({
    queryKey: stardexTokenQueryKeys.downloadLogo(client?.contractAddress),
    queryFn: () => client ? client.downloadLogo() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface StardexTokenReactQuery<TResponse, TData = TResponse> {
  client: StardexTokenQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface StardexTokenDownloadLogoQuery<TData> extends StardexTokenReactQuery<DownloadLogoResponse, TData> {}
export function useStardexTokenDownloadLogoQuery<TData = DownloadLogoResponse>({
  client,
  options
}: StardexTokenDownloadLogoQuery<TData>) {
  return useQuery<DownloadLogoResponse, Error, TData>(stardexTokenQueryKeys.downloadLogo(client?.contractAddress), () => client ? client.downloadLogo() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexTokenMarketingInfoQuery<TData> extends StardexTokenReactQuery<MarketingInfoResponse, TData> {}
export function useStardexTokenMarketingInfoQuery<TData = MarketingInfoResponse>({
  client,
  options
}: StardexTokenMarketingInfoQuery<TData>) {
  return useQuery<MarketingInfoResponse, Error, TData>(stardexTokenQueryKeys.marketingInfo(client?.contractAddress), () => client ? client.marketingInfo() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexTokenAllAccountsQuery<TData> extends StardexTokenReactQuery<AllAccountsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useStardexTokenAllAccountsQuery<TData = AllAccountsResponse>({
  client,
  args,
  options
}: StardexTokenAllAccountsQuery<TData>) {
  return useQuery<AllAccountsResponse, Error, TData>(stardexTokenQueryKeys.allAccounts(client?.contractAddress, args), () => client ? client.allAccounts({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexTokenAllSpenderAllowancesQuery<TData> extends StardexTokenReactQuery<AllSpenderAllowancesResponse, TData> {
  args: {
    limit?: number;
    spender: string;
    startAfter?: string;
  };
}
export function useStardexTokenAllSpenderAllowancesQuery<TData = AllSpenderAllowancesResponse>({
  client,
  args,
  options
}: StardexTokenAllSpenderAllowancesQuery<TData>) {
  return useQuery<AllSpenderAllowancesResponse, Error, TData>(stardexTokenQueryKeys.allSpenderAllowances(client?.contractAddress, args), () => client ? client.allSpenderAllowances({
    limit: args.limit,
    spender: args.spender,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexTokenAllAllowancesQuery<TData> extends StardexTokenReactQuery<AllAllowancesResponse, TData> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useStardexTokenAllAllowancesQuery<TData = AllAllowancesResponse>({
  client,
  args,
  options
}: StardexTokenAllAllowancesQuery<TData>) {
  return useQuery<AllAllowancesResponse, Error, TData>(stardexTokenQueryKeys.allAllowances(client?.contractAddress, args), () => client ? client.allAllowances({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexTokenAllowanceQuery<TData> extends StardexTokenReactQuery<AllowanceResponse, TData> {
  args: {
    owner: string;
    spender: string;
  };
}
export function useStardexTokenAllowanceQuery<TData = AllowanceResponse>({
  client,
  args,
  options
}: StardexTokenAllowanceQuery<TData>) {
  return useQuery<AllowanceResponse, Error, TData>(stardexTokenQueryKeys.allowance(client?.contractAddress, args), () => client ? client.allowance({
    owner: args.owner,
    spender: args.spender
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexTokenMinterQuery<TData> extends StardexTokenReactQuery<MinterResponse, TData> {}
export function useStardexTokenMinterQuery<TData = MinterResponse>({
  client,
  options
}: StardexTokenMinterQuery<TData>) {
  return useQuery<MinterResponse, Error, TData>(stardexTokenQueryKeys.minter(client?.contractAddress), () => client ? client.minter() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexTokenTokenInfoQuery<TData> extends StardexTokenReactQuery<TokenInfoResponse, TData> {}
export function useStardexTokenTokenInfoQuery<TData = TokenInfoResponse>({
  client,
  options
}: StardexTokenTokenInfoQuery<TData>) {
  return useQuery<TokenInfoResponse, Error, TData>(stardexTokenQueryKeys.tokenInfo(client?.contractAddress), () => client ? client.tokenInfo() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexTokenBalanceQuery<TData> extends StardexTokenReactQuery<BalanceResponse, TData> {
  args: {
    address: string;
  };
}
export function useStardexTokenBalanceQuery<TData = BalanceResponse>({
  client,
  args,
  options
}: StardexTokenBalanceQuery<TData>) {
  return useQuery<BalanceResponse, Error, TData>(stardexTokenQueryKeys.balance(client?.contractAddress, args), () => client ? client.balance({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexTokenUploadLogoMutation {
  client: StardexTokenClient;
  msg: Logo;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexTokenUploadLogoMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenUploadLogoMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexTokenUploadLogoMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.uploadLogo(msg, fee, memo, funds), options);
}
export interface StardexTokenUpdateMarketingMutation {
  client: StardexTokenClient;
  msg: {
    description?: string;
    marketing?: string;
    project?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexTokenUpdateMarketingMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenUpdateMarketingMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexTokenUpdateMarketingMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateMarketing(msg, fee, memo, funds), options);
}
export interface StardexTokenUpdateMinterMutation {
  client: StardexTokenClient;
  msg: {
    newMinter?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexTokenUpdateMinterMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenUpdateMinterMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexTokenUpdateMinterMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateMinter(msg, fee, memo, funds), options);
}
export interface StardexTokenMintMutation {
  client: StardexTokenClient;
  msg: {
    amount: Uint128;
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexTokenMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexTokenMintMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(msg, fee, memo, funds), options);
}
export interface StardexTokenBurnFromMutation {
  client: StardexTokenClient;
  msg: {
    amount: Uint128;
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexTokenBurnFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenBurnFromMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexTokenBurnFromMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.burnFrom(msg, fee, memo, funds), options);
}
export interface StardexTokenSendFromMutation {
  client: StardexTokenClient;
  msg: {
    amount: Uint128;
    contract: string;
    msg: Binary;
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexTokenSendFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenSendFromMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexTokenSendFromMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.sendFrom(msg, fee, memo, funds), options);
}
export interface StardexTokenTransferFromMutation {
  client: StardexTokenClient;
  msg: {
    amount: Uint128;
    owner: string;
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexTokenTransferFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenTransferFromMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexTokenTransferFromMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transferFrom(msg, fee, memo, funds), options);
}
export interface StardexTokenDecreaseAllowanceMutation {
  client: StardexTokenClient;
  msg: {
    amount: Uint128;
    expires?: Expiration;
    spender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexTokenDecreaseAllowanceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenDecreaseAllowanceMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexTokenDecreaseAllowanceMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.decreaseAllowance(msg, fee, memo, funds), options);
}
export interface StardexTokenIncreaseAllowanceMutation {
  client: StardexTokenClient;
  msg: {
    amount: Uint128;
    expires?: Expiration;
    spender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexTokenIncreaseAllowanceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenIncreaseAllowanceMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexTokenIncreaseAllowanceMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.increaseAllowance(msg, fee, memo, funds), options);
}
export interface StardexTokenSendMutation {
  client: StardexTokenClient;
  msg: {
    amount: Uint128;
    contract: string;
    msg: Binary;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexTokenSendMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenSendMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexTokenSendMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.send(msg, fee, memo, funds), options);
}
export interface StardexTokenBurnMutation {
  client: StardexTokenClient;
  msg: {
    amount: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexTokenBurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenBurnMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexTokenBurnMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.burn(msg, fee, memo, funds), options);
}
export interface StardexTokenTransferMutation {
  client: StardexTokenClient;
  msg: {
    amount: Uint128;
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexTokenTransferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexTokenTransferMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexTokenTransferMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transfer(msg, fee, memo, funds), options);
}