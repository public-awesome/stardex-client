"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useStardexRouterReceiveMutation = exports.useStardexRouterExecuteSwapOperationsMutation = exports.useStardexRouterExecuteSwapOperationMutation = exports.useStardexRouterConfigQuery = exports.useStardexRouterSimulateSwapOperationsQuery = exports.stardexRouterQueries = exports.stardexRouterQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.stardexRouterQueryKeys = {
    contract: [{
            contract: "stardexRouter"
        }],
    address: (contractAddress) => [{
            ...exports.stardexRouterQueryKeys.contract[0],
            address: contractAddress
        }],
    config: (contractAddress, args) => [{
            ...exports.stardexRouterQueryKeys.address(contractAddress)[0],
            method: "config",
            args
        }],
    simulateSwapOperations: (contractAddress, args) => [{
            ...exports.stardexRouterQueryKeys.address(contractAddress)[0],
            method: "simulate_swap_operations",
            args
        }]
};
exports.stardexRouterQueries = {
    config: ({ client, options }) => ({
        queryKey: exports.stardexRouterQueryKeys.config(client?.contractAddress),
        queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    }),
    simulateSwapOperations: ({ client, args, options }) => ({
        queryKey: exports.stardexRouterQueryKeys.simulateSwapOperations(client?.contractAddress, args),
        queryFn: () => client ? client.simulateSwapOperations({
            offerAmount: args.offerAmount,
            operations: args.operations
        }) : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    })
};
function useStardexRouterSimulateSwapOperationsQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.stardexRouterQueryKeys.simulateSwapOperations(client?.contractAddress, args), () => client ? client.simulateSwapOperations({
        offerAmount: args.offerAmount,
        operations: args.operations
    }) : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexRouterSimulateSwapOperationsQuery = useStardexRouterSimulateSwapOperationsQuery;
function useStardexRouterConfigQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.stardexRouterQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexRouterConfigQuery = useStardexRouterConfigQuery;
function useStardexRouterExecuteSwapOperationMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.executeSwapOperation(msg, fee, memo, funds), options);
}
exports.useStardexRouterExecuteSwapOperationMutation = useStardexRouterExecuteSwapOperationMutation;
function useStardexRouterExecuteSwapOperationsMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.executeSwapOperations(msg, fee, memo, funds), options);
}
exports.useStardexRouterExecuteSwapOperationsMutation = useStardexRouterExecuteSwapOperationsMutation;
function useStardexRouterReceiveMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.receive(msg, fee, memo, funds), options);
}
exports.useStardexRouterReceiveMutation = useStardexRouterReceiveMutation;
