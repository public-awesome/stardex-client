// Generated by ts-to-zod
import { z } from 'zod'

export const pairTypeSchema = z.union([
  z.object({
    xyk: z.object({}),
  }),
  z.object({
    stable: z.object({}),
  }),
  z.object({
    custom: z.string(),
  }),
])

export const pairConfigSchema = z.object({
  code_id: z.number(),
  is_disabled: z.boolean().optional(),
  is_generator_disabled: z.boolean().optional(),
  maker_fee_bps: z.number(),
  pair_type: pairTypeSchema,
  permissioned: z.boolean().optional(),
  total_fee_bps: z.number(),
})

export const trackerConfigSchema = z.object({
  code_id: z.number(),
  token_factory_addr: z.string(),
})

export const binarySchema = z.string()

export const addrSchema = z.string()

export const arrayOfPairTypeSchema = z.array(pairTypeSchema)

export const configResponseSchema = z.object({
  coin_registry_address: addrSchema,
  fee_address: addrSchema.optional().nullable(),
  generator_address: addrSchema.optional().nullable(),
  owner: addrSchema,
  pair_configs: z.array(pairConfigSchema),
  token_code_id: z.number(),
  whitelist_code_id: z.number(),
})

export const feeInfoResponseSchema = z.object({
  fee_address: addrSchema.optional().nullable(),
  maker_fee_bps: z.number(),
  total_fee_bps: z.number(),
})

export const instantiateMsgSchema = z.object({
  coin_registry_address: z.string(),
  fee_address: z.string().optional().nullable(),
  generator_address: z.string().optional().nullable(),
  owner: z.string(),
  pair_configs: z.array(pairConfigSchema),
  token_code_id: z.number(),
  tracker_config: trackerConfigSchema.optional().nullable(),
  whitelist_code_id: z.number(),
})

export const assetInfoSchema = z.union([
  z.object({
    token: z.object({
      contract_addr: addrSchema,
    }),
  }),
  z.object({
    native_token: z.object({
      denom: z.string(),
    }),
  }),
])

export const queryMsgSchema = z.union([
  z.object({
    config: z.object({}),
  }),
  z.object({
    pair: z.object({
      asset_infos: z.array(assetInfoSchema),
    }),
  }),
  z.object({
    pairs: z.object({
      limit: z.number().optional().nullable(),
      start_after: z.array(assetInfoSchema).optional().nullable(),
    }),
  }),
  z.object({
    fee_info: z.object({
      pair_type: pairTypeSchema,
    }),
  }),
  z.object({
    blacklisted_pair_types: z.object({}),
  }),
  z.object({
    tracker_config: z.object({}),
  }),
])

export const pairInfoSchema = z.object({
  asset_infos: z.array(assetInfoSchema),
  contract_addr: addrSchema,
  liquidity_token: z.string(),
  pair_type: pairTypeSchema,
})

export const pairsResponseSchema = z.object({
  pairs: z.array(pairInfoSchema),
})

export const executeMsgSchema = z.union([
  z.object({
    update_config: z.object({
      coin_registry_address: z.string().optional().nullable(),
      fee_address: z.string().optional().nullable(),
      generator_address: z.string().optional().nullable(),
      token_code_id: z.number().optional().nullable(),
      whitelist_code_id: z.number().optional().nullable(),
    }),
  }),
  z.object({
    update_tracker_config: z.object({
      token_factory_addr: z.string().optional().nullable(),
      tracker_code_id: z.number(),
    }),
  }),
  z.object({
    update_pair_config: z.object({
      config: pairConfigSchema,
    }),
  }),
  z.object({
    create_pair: z.object({
      asset_infos: z.array(assetInfoSchema),
      init_params: binarySchema.optional().nullable(),
      pair_type: pairTypeSchema,
    }),
  }),
  z.object({
    deregister: z.object({
      asset_infos: z.array(assetInfoSchema),
    }),
  }),
  z.object({
    propose_new_owner: z.object({
      expires_in: z.number(),
      owner: z.string(),
    }),
  }),
  z.object({
    drop_ownership_proposal: z.object({}),
  }),
  z.object({
    claim_ownership: z.object({}),
  }),
])
