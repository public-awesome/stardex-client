"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useContracts = exports.ContractsProvider = void 0;
const contractContextProviders_1 = require("./contractContextProviders");
const react_1 = __importStar(require("react"));
const ContractsContext = react_1.default.createContext(null);
const ContractsProvider = ({ children, contractsConfig, }) => {
    const [cosmWasmClient, setCosmWasmClient] = (0, react_1.useState)();
    const [signingCosmWasmClient, setSigningCosmWasmClient] = (0, react_1.useState)();
    const { address, getCosmWasmClient, getSigningCosmWasmClient } = contractsConfig;
    const prevAddressRef = (0, react_1.useRef)(address);
    const contracts = (0, react_1.useMemo)(() => {
        return (0, contractContextProviders_1.getProviders)(address, cosmWasmClient, signingCosmWasmClient);
    }, [address, cosmWasmClient, signingCosmWasmClient]);
    (0, react_1.useEffect)(() => {
        const connectSigningCwClient = async () => {
            if (address && prevAddressRef.current !== address) {
                const signingCosmWasmClient = await getSigningCosmWasmClient();
                setSigningCosmWasmClient(signingCosmWasmClient);
            }
            else if (!address) {
                setSigningCosmWasmClient(undefined);
            }
            prevAddressRef.current = address;
        };
        connectSigningCwClient();
    }, [address, getSigningCosmWasmClient]);
    (0, react_1.useEffect)(() => {
        const connectCosmWasmClient = async () => {
            const cosmWasmClient = await getCosmWasmClient();
            setCosmWasmClient(cosmWasmClient);
        };
        connectCosmWasmClient();
    }, [getCosmWasmClient]);
    return (<ContractsContext.Provider value={contracts}>
      {children}
    </ContractsContext.Provider>);
};
exports.ContractsProvider = ContractsProvider;
const useContracts = () => {
    const contracts = (0, react_1.useContext)(ContractsContext);
    if (contracts === null) {
        throw new Error('useContracts must be used within a ContractsProvider');
    }
    return contracts;
};
exports.useContracts = useContracts;
