/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, ExecMsg, Uint128, QueryMsg, QueryMsg1, NullableUserReward, Uint256, UserReward } from "./StardexStakeRewards.types";
export interface StardexStakeRewardsReadOnlyInterface {
  contractAddress: string;
  userReward: ({
    address
  }: {
    address: string;
  }) => Promise<NullableUserReward>;
}
export class StardexStakeRewardsQueryClient implements StardexStakeRewardsReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.userReward = this.userReward.bind(this);
  }
  userReward = async ({
    address
  }: {
    address: string;
  }): Promise<NullableUserReward> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_reward: {
        address
      }
    });
  };
}
export interface StardexStakeRewardsInterface extends StardexStakeRewardsReadOnlyInterface {
  contractAddress: string;
  sender: string;
  stakeChange: ({
    recipient,
    stakedAmount,
    totalStaked
  }: {
    recipient: string;
    stakedAmount: Uint128;
    totalStaked: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimRewards: ({
    recipient,
    stakedAmount,
    totalStaked
  }: {
    recipient: string;
    stakedAmount: Uint128;
    totalStaked: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class StardexStakeRewardsClient extends StardexStakeRewardsQueryClient implements StardexStakeRewardsInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.stakeChange = this.stakeChange.bind(this);
    this.claimRewards = this.claimRewards.bind(this);
  }
  stakeChange = async ({
    recipient,
    stakedAmount,
    totalStaked
  }: {
    recipient: string;
    stakedAmount: Uint128;
    totalStaked: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      stake_change: {
        recipient,
        staked_amount: stakedAmount,
        total_staked: totalStaked
      }
    }, fee, memo, _funds);
  };
  claimRewards = async ({
    recipient,
    stakedAmount,
    totalStaked
  }: {
    recipient: string;
    stakedAmount: Uint128;
    totalStaked: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_rewards: {
        recipient,
        staked_amount: stakedAmount,
        total_staked: totalStaked
      }
    }, fee, memo, _funds);
  };
}