/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { PairType, PairConfig, TrackerConfig, AssetInfo, Binary, ArrayOfPairType, ConfigResponse, FeeInfoResponse, PairInfo, PairsResponse } from "./StardexFactory.types";
export interface StardexFactoryReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    pair: ({ assetInfos }: {
        assetInfos: AssetInfo[];
    }) => Promise<PairInfo>;
    pairs: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: AssetInfo[];
    }) => Promise<PairsResponse>;
    feeInfo: ({ pairType }: {
        pairType: PairType;
    }) => Promise<FeeInfoResponse>;
    blacklistedPairTypes: () => Promise<ArrayOfPairType>;
    trackerConfig: () => Promise<TrackerConfig>;
}
export declare class StardexFactoryQueryClient implements StardexFactoryReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    pair: ({ assetInfos }: {
        assetInfos: AssetInfo[];
    }) => Promise<PairInfo>;
    pairs: ({ limit, startAfter }: {
        limit?: number | undefined;
        startAfter?: AssetInfo[] | undefined;
    }) => Promise<PairsResponse>;
    feeInfo: ({ pairType }: {
        pairType: PairType;
    }) => Promise<FeeInfoResponse>;
    blacklistedPairTypes: () => Promise<ArrayOfPairType>;
    trackerConfig: () => Promise<TrackerConfig>;
}
export interface StardexFactoryInterface extends StardexFactoryReadOnlyInterface {
    contractAddress: string;
    sender: string;
    updateConfig: ({ coinRegistryAddress, feeAddress, generatorAddress, tokenCodeId, whitelistCodeId }: {
        coinRegistryAddress?: string;
        feeAddress?: string;
        generatorAddress?: string;
        tokenCodeId?: number;
        whitelistCodeId?: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateTrackerConfig: ({ tokenFactoryAddr, trackerCodeId }: {
        tokenFactoryAddr?: string;
        trackerCodeId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updatePairConfig: ({ config }: {
        config: PairConfig;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    createPair: ({ assetInfos, initParams, pairType }: {
        assetInfos: AssetInfo[];
        initParams?: Binary;
        pairType: PairType;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    deregister: ({ assetInfos }: {
        assetInfos: AssetInfo[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    proposeNewOwner: ({ expiresIn, owner }: {
        expiresIn: number;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    dropOwnershipProposal: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claimOwnership: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class StardexFactoryClient extends StardexFactoryQueryClient implements StardexFactoryInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    updateConfig: ({ coinRegistryAddress, feeAddress, generatorAddress, tokenCodeId, whitelistCodeId }: {
        coinRegistryAddress?: string | undefined;
        feeAddress?: string | undefined;
        generatorAddress?: string | undefined;
        tokenCodeId?: number | undefined;
        whitelistCodeId?: number | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateTrackerConfig: ({ tokenFactoryAddr, trackerCodeId }: {
        tokenFactoryAddr?: string | undefined;
        trackerCodeId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updatePairConfig: ({ config }: {
        config: PairConfig;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    createPair: ({ assetInfos, initParams, pairType }: {
        assetInfos: AssetInfo[];
        initParams?: string | undefined;
        pairType: PairType;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    deregister: ({ assetInfos }: {
        assetInfos: AssetInfo[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    proposeNewOwner: ({ expiresIn, owner }: {
        expiresIn: number;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    dropOwnershipProposal: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claimOwnership: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
