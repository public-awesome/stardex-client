/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, ExecMsg, Uint128, QueryMsg, QueryMsg1, NullableUserReward, Uint256, UserReward } from "./StardexStakeRewards.types";
import { StardexStakeRewardsQueryClient, StardexStakeRewardsClient } from "./StardexStakeRewards.client";
export const stardexStakeRewardsQueryKeys = {
  contract: ([{
    contract: "stardexStakeRewards"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...stardexStakeRewardsQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  userReward: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...stardexStakeRewardsQueryKeys.address(contractAddress)[0],
    method: "user_reward",
    args
  }] as const)
};
export const stardexStakeRewardsQueries = {
  userReward: <TData = NullableUserReward,>({
    client,
    args,
    options
  }: StardexStakeRewardsUserRewardQuery<TData>): UseQueryOptions<NullableUserReward, Error, TData> => ({
    queryKey: stardexStakeRewardsQueryKeys.userReward(client?.contractAddress, args),
    queryFn: () => client ? client.userReward({
      address: args.address
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface StardexStakeRewardsReactQuery<TResponse, TData = TResponse> {
  client: StardexStakeRewardsQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface StardexStakeRewardsUserRewardQuery<TData> extends StardexStakeRewardsReactQuery<NullableUserReward, TData> {
  args: {
    address: string;
  };
}
export function useStardexStakeRewardsUserRewardQuery<TData = NullableUserReward>({
  client,
  args,
  options
}: StardexStakeRewardsUserRewardQuery<TData>) {
  return useQuery<NullableUserReward, Error, TData>(stardexStakeRewardsQueryKeys.userReward(client?.contractAddress, args), () => client ? client.userReward({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StardexStakeRewardsClaimRewardsMutation {
  client: StardexStakeRewardsClient;
  msg: {
    recipient: string;
    stakedAmount: Uint128;
    totalStaked: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexStakeRewardsClaimRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeRewardsClaimRewardsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexStakeRewardsClaimRewardsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claimRewards(msg, fee, memo, funds), options);
}
export interface StardexStakeRewardsStakeChangeMutation {
  client: StardexStakeRewardsClient;
  msg: {
    recipient: string;
    stakedAmount: Uint128;
    totalStaked: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStardexStakeRewardsStakeChangeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StardexStakeRewardsStakeChangeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StardexStakeRewardsStakeChangeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.stakeChange(msg, fee, memo, funds), options);
}