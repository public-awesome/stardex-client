"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useStardexStakeNativeUpdateConfigMutation = exports.useStardexStakeNativeCreateRewardAccountMutation = exports.useStardexStakeNativeRemoveRewardAccountMutation = exports.useStardexStakeNativeStakeMutation = exports.useStardexStakeNativeUnstakeMutation = exports.useStardexStakeNativeClaimMutation = exports.useStardexStakeNativeClaimRewardsMutation = exports.useStardexStakeNativeRewardAccountsQuery = exports.useStardexStakeNativeStakeBalanceAtHeightQuery = exports.stardexStakeNativeQueries = exports.stardexStakeNativeQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.stardexStakeNativeQueryKeys = {
    contract: [{
            contract: "stardexStakeNative"
        }],
    address: (contractAddress) => [{
            ...exports.stardexStakeNativeQueryKeys.contract[0],
            address: contractAddress
        }],
    rewardAccounts: (contractAddress, args) => [{
            ...exports.stardexStakeNativeQueryKeys.address(contractAddress)[0],
            method: "reward_accounts",
            args
        }],
    stakeBalanceAtHeight: (contractAddress, args) => [{
            ...exports.stardexStakeNativeQueryKeys.address(contractAddress)[0],
            method: "stake_balance_at_height",
            args
        }]
};
exports.stardexStakeNativeQueries = {
    rewardAccounts: ({ client, options }) => ({
        queryKey: exports.stardexStakeNativeQueryKeys.rewardAccounts(client?.contractAddress),
        queryFn: () => client ? client.rewardAccounts() : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    }),
    stakeBalanceAtHeight: ({ client, args, options }) => ({
        queryKey: exports.stardexStakeNativeQueryKeys.stakeBalanceAtHeight(client?.contractAddress, args),
        queryFn: () => client ? client.stakeBalanceAtHeight({
            address: args.address,
            height: args.height
        }) : Promise.reject(new Error("Invalid client")),
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    })
};
function useStardexStakeNativeStakeBalanceAtHeightQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.stardexStakeNativeQueryKeys.stakeBalanceAtHeight(client?.contractAddress, args), () => client ? client.stakeBalanceAtHeight({
        address: args.address,
        height: args.height
    }) : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexStakeNativeStakeBalanceAtHeightQuery = useStardexStakeNativeStakeBalanceAtHeightQuery;
function useStardexStakeNativeRewardAccountsQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.stardexStakeNativeQueryKeys.rewardAccounts(client?.contractAddress), () => client ? client.rewardAccounts() : Promise.reject(new Error("Invalid client")), {
        ...options,
        enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
    });
}
exports.useStardexStakeNativeRewardAccountsQuery = useStardexStakeNativeRewardAccountsQuery;
function useStardexStakeNativeClaimRewardsMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.claimRewards(msg, fee, memo, funds), options);
}
exports.useStardexStakeNativeClaimRewardsMutation = useStardexStakeNativeClaimRewardsMutation;
function useStardexStakeNativeClaimMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.claim(msg, fee, memo, funds), options);
}
exports.useStardexStakeNativeClaimMutation = useStardexStakeNativeClaimMutation;
function useStardexStakeNativeUnstakeMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.unstake(msg, fee, memo, funds), options);
}
exports.useStardexStakeNativeUnstakeMutation = useStardexStakeNativeUnstakeMutation;
function useStardexStakeNativeStakeMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.stake(msg, fee, memo, funds), options);
}
exports.useStardexStakeNativeStakeMutation = useStardexStakeNativeStakeMutation;
function useStardexStakeNativeRemoveRewardAccountMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.removeRewardAccount(msg, fee, memo, funds), options);
}
exports.useStardexStakeNativeRemoveRewardAccountMutation = useStardexStakeNativeRemoveRewardAccountMutation;
function useStardexStakeNativeCreateRewardAccountMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.createRewardAccount(msg, fee, memo, funds), options);
}
exports.useStardexStakeNativeCreateRewardAccountMutation = useStardexStakeNativeCreateRewardAccountMutation;
function useStardexStakeNativeUpdateConfigMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateConfig(msg, fee, memo, funds), options);
}
exports.useStardexStakeNativeUpdateConfigMutation = useStardexStakeNativeUpdateConfigMutation;
